//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.44.1.0
//   At: 2025-03-17T09:20:05.2052280+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<ImageEntities>();
        serviceCollection.AddTransient<CounterEntities>();
        serviceCollection.AddTransient<WakeWordEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<FanEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AdguardServices>();
        serviceCollection.AddTransient<AssistSatelliteServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FritzServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleAssistantServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HistoryStatsServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<ImageServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<MusicAssistantServices>();
        serviceCollection.AddTransient<NordpoolServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PowercalcServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<SchedulerServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShellCommandServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    LockEntities Lock { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    SunEntities Sun { get; }

    RemoteEntities Remote { get; }

    SttEntities Stt { get; }

    TtsEntities Tts { get; }

    ImageEntities Image { get; }

    CounterEntities Counter { get; }

    WakeWordEntities WakeWord { get; }

    CameraEntities Camera { get; }

    ConversationEntities Conversation { get; }

    ClimateEntities Climate { get; }

    InputButtonEntities InputButton { get; }

    FanEntities Fan { get; }

    CalendarEntities Calendar { get; }

    EventEntities Event { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public ImageEntities Image => new(_haContext);
    public CounterEntities Counter => new(_haContext);
    public WakeWordEntities WakeWord => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public FanEntities Fan => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public EventEntities Event => new(_haContext);
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>3D printer notification</summary>
    public AutomationEntity _3dPrinterNotification => new(_haContext, "automation.3d_printer_notification");
    ///<summary>Adguard auto on</summary>
    public AutomationEntity AdguardAutoOn => new(_haContext, "automation.adguard_auto_on");
    ///<summary>Air Purifier</summary>
    public AutomationEntity AirPurifier => new(_haContext, "automation.air_purifier");
    ///<summary>Air Quality</summary>
    public AutomationEntity AirQuality => new(_haContext, "automation.air_quality");
    ///<summary>Alarm Automation</summary>
    public AutomationEntity AlarmAutomation => new(_haContext, "automation.alarm_automation");
    ///<summary>Alarm Automation (Duplicate)</summary>
    public AutomationEntity AlarmAutomationDuplicate => new(_haContext, "automation.alarm_automation_duplicate");
    ///<summary>Away From Home</summary>
    public AutomationEntity AwayFromHome => new(_haContext, "automation.away_from_home");
    ///<summary>AwokeTime Helper</summary>
    public AutomationEntity AwoketimeHelper => new(_haContext, "automation.awoketime_helper");
    ///<summary>Bright Light Automation</summary>
    public AutomationEntity BrightLightAutomation => new(_haContext, "automation.bright_light_automation");
    ///<summary>Cable Connected Notification</summary>
    public AutomationEntity CableConnectedNotification => new(_haContext, "automation.cable_connected_notification");
    ///<summary>Cast</summary>
    public AutomationEntity Cast => new(_haContext, "automation.cast");
    ///<summary>Desktop Standing</summary>
    public AutomationEntity DesktopStanding => new(_haContext, "automation.desktop_standing");
    ///<summary>Desktop Standing disabler</summary>
    public AutomationEntity DesktopStandingDisabler => new(_haContext, "automation.desktop_standing_disabler");
    ///<summary>#Disposeable</summary>
    public AutomationEntity Disposeable => new(_haContext, "automation.disposeable");
    ///<summary>Ecoflow Ac auto on</summary>
    public AutomationEntity EcoflowAcAutoOn => new(_haContext, "automation.ecoflow_ac_auto_on");
    ///<summary>Ecoflow Switchbot Helper</summary>
    public AutomationEntity EcoflowSwitchbotHelper => new(_haContext, "automation.ecoflow_switchbot_helper");
    ///<summary>Ecoflow Timeout</summary>
    public AutomationEntity EcoflowTimeout => new(_haContext, "automation.ecoflow_timeout");
    ///<summary>Energy Calcluations</summary>
    public AutomationEntity EnergyCalcluations => new(_haContext, "automation.energy_calcluations");
    ///<summary>Eye Rester</summary>
    public AutomationEntity EyeRester => new(_haContext, "automation.eye_rester");
    ///<summary>Fan Auto Off</summary>
    public AutomationEntity Fan => new(_haContext, "automation.fan");
    ///<summary>Fan Notifiction</summary>
    public AutomationEntity FanNotifiction => new(_haContext, "automation.fan_notifiction");
    ///<summary>Freezer temp calibration</summary>
    public AutomationEntity FreezerTempCalibration => new(_haContext, "automation.freezer_temp_calibration");
    ///<summary>Fridge Automation</summary>
    public AutomationEntity FridgeAutomation => new(_haContext, "automation.fridge_automation");
    ///<summary>Fridge level reminder</summary>
    public AutomationEntity FridgeLevelReminder => new(_haContext, "automation.fridge_level_reminder");
    ///<summary>Frontdoor 2</summary>
    public AutomationEntity Frontdoor2 => new(_haContext, "automation.frontdoor_2");
    ///<summary>(Guest) Guest Mode Notification</summary>
    public AutomationEntity GuestModeNotification => new(_haContext, "automation.guest_mode_notification");
    ///<summary>Humidifier automation</summary>
    public AutomationEntity HumidifierAutomation => new(_haContext, "automation.humidifier_automation");
    ///<summary>IsAsleep-Actions</summary>
    public AutomationEntity IsasleepActions => new(_haContext, "automation.isasleep_actions");
    ///<summary>IsAsleepOffUpdate</summary>
    public AutomationEntity Isasleepoffupdate => new(_haContext, "automation.isasleepoffupdate");
    ///<summary>IsAsleepOnUpdate</summary>
    public AutomationEntity Isasleepupdate => new(_haContext, "automation.isasleepupdate");
    ///<summary>Keep Knobs Command</summary>
    public AutomationEntity KeepKnobsCommand => new(_haContext, "automation.keep_knobs_command");
    ///<summary>Keychain</summary>
    public AutomationEntity Keychain => new(_haContext, "automation.keychain");
    ///<summary>kirchen kight</summary>
    public AutomationEntity KirchenKight => new(_haContext, "automation.kirchen_kight");
    ///<summary>Knob volume control</summary>
    public AutomationEntity KnobVolumeControl => new(_haContext, "automation.knob_volume_control");
    ///<summary>Modem On by Bed Knob</summary>
    public AutomationEntity ModemOnByBedKnob => new(_haContext, "automation.modem_on_by_bed_knob");
    ///<summary>Modem on for nordpool</summary>
    public AutomationEntity ModemOnForNordpool => new(_haContext, "automation.modem_on_for_nordpool");
    ///<summary>New Automation</summary>
    public AutomationEntity NewAutomation => new(_haContext, "automation.new_automation");
    ///<summary>On Boot</summary>
    public AutomationEntity OnBoot => new(_haContext, "automation.on_boot");
    ///<summary>Keep Ecoflow on</summary>
    public AutomationEntity Oneuseschedule => new(_haContext, "automation.oneuseschedule");
    ///<summary>Pc auto off</summary>
    public AutomationEntity PcAutoOff => new(_haContext, "automation.pc_auto_off");
    ///<summary>Pedal behaviour</summary>
    public AutomationEntity PedalBehaviour => new(_haContext, "automation.pedal_behaviour");
    ///<summary>Pesukone</summary>
    public AutomationEntity Pesukone => new(_haContext, "automation.pesukone");
    ///<summary>Inkplate updates</summary>
    public AutomationEntity RefreshInkplate => new(_haContext, "automation.refresh_inkplate");
    ///<summary>Reset Withings</summary>
    public AutomationEntity ResetWithings => new(_haContext, "automation.reset_withings");
    ///<summary>Schedule PC Shutdown</summary>
    public AutomationEntity SchedulePcShutdown => new(_haContext, "automation.schedule_pc_shutdown");
    ///<summary>(Sensor) Bedside Sensor</summary>
    public AutomationEntity SensorBedsideSensor => new(_haContext, "automation.sensor_bedside_sensor");
    ///<summary>Sensors Active Notification</summary>
    public AutomationEntity SensorsActiveNotification => new(_haContext, "automation.sensors_active_notification");
    ///<summary>Solar Logging</summary>
    public AutomationEntity SolarLogging => new(_haContext, "automation.solar_logging");
    ///<summary>Homecoming</summary>
    public AutomationEntity Test => new(_haContext, "automation.test");
    ///<summary>Test</summary>
    public AutomationEntity Test2 => new(_haContext, "automation.test_2");
    ///<summary>To Bed Actions</summary>
    public AutomationEntity ToBedActions => new(_haContext, "automation.to_bed_actions");
    ///<summary>Toilet Seat Helper</summary>
    public AutomationEntity ToiletSeatHelper => new(_haContext, "automation.toilet_seat_helper");
    ///<summary>Turn off everything triggerrer</summary>
    public AutomationEntity TurnOffEverythingTriggerrer => new(_haContext, "automation.turn_off_everything_triggerrer");
    ///<summary>Turn off Pc when Lora training done</summary>
    public AutomationEntity TurnOffPcWhenLoraTrainingDone => new(_haContext, "automation.turn_off_pc_when_lora_training_done");
    ///<summary>Turn Off Proxmox and modem</summary>
    public AutomationEntity TurnOffProxmoxAndModem => new(_haContext, "automation.turn_off_proxmox_and_modem");
    ///<summary>Desk Fans</summary>
    public AutomationEntity UnderDeskFan => new(_haContext, "automation.under_desk_fan");
    ///<summary>Weekly Rewrite Database</summary>
    public AutomationEntity WeeklyRewriteDatabase => new(_haContext, "automation.weekly_rewrite_database");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>PC Sensor Occupancy</summary>
    public BinarySensorEntity _0x001788010bcfb16fOccupancy => new(_haContext, "binary_sensor.0x001788010bcfb16f_occupancy");
    ///<summary>Modem</summary>
    public BinarySensorEntity _19216801 => new(_haContext, "binary_sensor.192_168_0_1");
    ///<summary>192.168.0.14</summary>
    public BinarySensorEntity _192168014 => new(_haContext, "binary_sensor.192_168_0_14");
    ///<summary>Envy Ping</summary>
    public BinarySensorEntity _192168022 => new(_haContext, "binary_sensor.192_168_0_22");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Cheap Electricity</summary>
    public BinarySensorEntity CheapElectricity => new(_haContext, "binary_sensor.cheap_electricity");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Health</summary>
    public BinarySensorEntity DiskPveDevSdaHealth => new(_haContext, "binary_sensor.disk_pve_dev_sda_health");
    ///<summary>Disk pve: One Touch HDD (/dev/sdb) Health</summary>
    public BinarySensorEntity DiskPveOneTouchHddDevSdbHealth => new(_haContext, "binary_sensor.disk_pve_one_touch_hdd_dev_sdb_health");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Health</summary>
    public BinarySensorEntity DiskPveSt6000ne0002kr101DevSdcHealth => new(_haContext, "binary_sensor.disk_pve_st6000ne000_2kr101_dev_sdc_health");
    ///<summary>Health</summary>
    public BinarySensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddHealth => new(_haContext, "binary_sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_health");
    ///<summary>Fridge Contact Sensor Battery</summary>
    public BinarySensorEntity FridgeContactSensorBatteryLow => new(_haContext, "binary_sensor.fridge_contact_sensor_battery_low");
    ///<summary>Fridge Contact Sensor Door</summary>
    public BinarySensorEntity FridgeContactSensorContact => new(_haContext, "binary_sensor.fridge_contact_sensor_contact");
    ///<summary>FridgeTemp</summary>
    public BinarySensorEntity Fridgetemp => new(_haContext, "binary_sensor.fridgetemp");
    ///<summary>FRITZ!Box 6660 Cable Connection</summary>
    public BinarySensorEntity FritzBox6660CableConnection => new(_haContext, "binary_sensor.fritz_box_6660_cable_connection");
    ///<summary>FRITZ!Box 6660 Cable Link</summary>
    public BinarySensorEntity FritzBox6660CableLink => new(_haContext, "binary_sensor.fritz_box_6660_cable_link");
    ///<summary>Hallway Sensor Occupancy</summary>
    public BinarySensorEntity HallwaySensorOccupancy => new(_haContext, "binary_sensor.hallway_sensor_occupancy");
    ///<summary>Home occupancy sensors</summary>
    public BinarySensorEntity HomeOccupancySensors => new(_haContext, "binary_sensor.home_occupancy_sensors");
    ///<summary>InternetGatewayDeviceV2 - FRITZ!Box 6660 Cable WAN status</summary>
    public BinarySensorEntity Internetgatewaydevicev2FritzBox6660CableWanStatus => new(_haContext, "binary_sensor.internetgatewaydevicev2_fritz_box_6660_cable_wan_status");
    ///<summary>is Standing Or Out</summary>
    public BinarySensorEntity IsStandingOrOut => new(_haContext, "binary_sensor.is_standing_or_out");
    ///<summary>Kitchen Distance Helper</summary>
    public BinarySensorEntity KitchenDistanceHelper => new(_haContext, "binary_sensor.kitchen_distance_helper");
    ///<summary>Kitchen Sensor Occupancy</summary>
    public BinarySensorEntity KitchenSensorOccupancy => new(_haContext, "binary_sensor.kitchen_sensor_occupancy");
    ///<summary>Livingroom Window Sensor Door</summary>
    public BinarySensorEntity LivingroomWindowSensorContact => new(_haContext, "binary_sensor.livingroom_window_sensor_contact");
    ///<summary>LivingRoomFP1 Presence</summary>
    public BinarySensorEntity Livingroomfp1Presence => new(_haContext, "binary_sensor.livingroomfp1_presence");
    ///<summary>Lovelace Kindle Screensaver Running</summary>
    public BinarySensorEntity LovelaceKindleScreensaverRunning => new(_haContext, "binary_sensor.lovelace_kindle_screensaver_running");
    ///<summary>Status</summary>
    public BinarySensorEntity LxcJellyfin101Status => new(_haContext, "binary_sensor.lxc_jellyfin_101_status");
    ///<summary>moto g(8) power lite Headphones</summary>
    public BinarySensorEntity MotoG8PowerLiteHeadphones => new(_haContext, "binary_sensor.moto_g_8_power_lite_headphones");
    ///<summary>moto g(8) power lite Is charging</summary>
    public BinarySensorEntity MotoG8PowerLiteIsCharging => new(_haContext, "binary_sensor.moto_g_8_power_lite_is_charging");
    ///<summary>moto g(8) power lite Music active</summary>
    public BinarySensorEntity MotoG8PowerLiteMusicActive => new(_haContext, "binary_sensor.moto_g_8_power_lite_music_active");
    ///<summary>Node pve Status</summary>
    public BinarySensorEntity NodePveStatus => new(_haContext, "binary_sensor.node_pve_status");
    ///<summary>Node pve Updates packages</summary>
    public BinarySensorEntity NodePveUpdatesPackages => new(_haContext, "binary_sensor.node_pve_updates_packages");
    ///<summary>Open Curtain Limit</summary>
    public BinarySensorEntity OpenCurtainLimit => new(_haContext, "binary_sensor.open_curtain_limit");
    ///<summary>Portable headphone sensors</summary>
    public BinarySensorEntity PortableHeadphoneSensors => new(_haContext, "binary_sensor.portable_headphone_sensors");
    ///<summary>QEMU haos14.0 (100) Health</summary>
    public BinarySensorEntity QemuHaos95100Health => new(_haContext, "binary_sensor.qemu_haos9_5_100_health");
    ///<summary>QEMU haos14.0 (100) Status</summary>
    public BinarySensorEntity QemuHaos95100Status => new(_haContext, "binary_sensor.qemu_haos9_5_100_status");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>SM-T530 Headphones</summary>
    public BinarySensorEntity SmT530Headphones => new(_haContext, "binary_sensor.sm_t530_headphones");
    ///<summary>SM-T530 Is Charging</summary>
    public BinarySensorEntity SmT530IsCharging => new(_haContext, "binary_sensor.sm_t530_is_charging");
    ///<summary>SM-T530 Music Active</summary>
    public BinarySensorEntity SmT530MusicActive => new(_haContext, "binary_sensor.sm_t530_music_active");
    ///<summary>Solar Charging Limit</summary>
    public BinarySensorEntity SolarChargingLimit => new(_haContext, "binary_sensor.solar_charging_limit");
    ///<summary>Standing Threshold</summary>
    public BinarySensorEntity StandingThreshold => new(_haContext, "binary_sensor.standing_threshold");
    ///<summary>Starkvind Replace filter</summary>
    public BinarySensorEntity StarkvindReplaceFilter => new(_haContext, "binary_sensor.starkvind_replace_filter");
    ///<summary>Lux Sensor Occupancy</summary>
    public BinarySensorEntity StorageSensorAqaraOccupancy => new(_haContext, "binary_sensor.storage_sensor_aqara_occupancy");
    ///<summary>Storage Sensor Battery</summary>
    public BinarySensorEntity StorageSensorBatteryLow => new(_haContext, "binary_sensor.storage_sensor_battery_low");
    ///<summary>Storage Sensor Occupancy</summary>
    public BinarySensorEntity StorageSensorOccupancy => new(_haContext, "binary_sensor.storage_sensor_occupancy");
    ///<summary>Storage Sensor Tamper</summary>
    public BinarySensorEntity StorageSensorTamper => new(_haContext, "binary_sensor.storage_sensor_tamper");
    ///<summary>Store LIDL Open</summary>
    public BinarySensorEntity StoreLidlOpen => new(_haContext, "binary_sensor.store_lidl_open");
    ///<summary>Store Prisma Open</summary>
    public BinarySensorEntity StorePrismaOpen => new(_haContext, "binary_sensor.store_prisma_open");
    ///<summary>Store S-Market Open</summary>
    public BinarySensorEntity StoreSMarketOpen => new(_haContext, "binary_sensor.store_s_market_open");
    ///<summary>Toilet Seat Sensor Door</summary>
    public BinarySensorEntity ToiletSeatSensorContact => new(_haContext, "binary_sensor.toilet_seat_sensor_contact");
    ///<summary>Toilet Sensor Occupancy</summary>
    public BinarySensorEntity ToiletSensorOccupancy => new(_haContext, "binary_sensor.toilet_sensor_occupancy");
    ///<summary>Walkingpad Contact sensor Door</summary>
    public BinarySensorEntity WalkingpadContactSensorContact => new(_haContext, "binary_sensor.walkingpad_contact_sensor_contact");
    ///<summary>Withings In bed</summary>
    public BinarySensorEntity WithingsInBed => new(_haContext, "binary_sensor.withings_in_bed");
    ///<summary>Zigbee2MQTT Bridge Connection state</summary>
    public BinarySensorEntity Zigbee2mqttBridgeConnectionState => new(_haContext, "binary_sensor.zigbee2mqtt_bridge_connection_state");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ENVY ENVY_TurnOffMonitors</summary>
    public ButtonEntity EnvyTurnoffmonitors => new(_haContext, "button.envy_turnoffmonitors");
    ///<summary>ENVY ENVY_WakeKey</summary>
    public ButtonEntity EnvyWakekey => new(_haContext, "button.envy_wakekey");
    ///<summary>FRITZ!Box 6660 Cable Cleanup</summary>
    public ButtonEntity FritzBox6660CableCleanup => new(_haContext, "button.fritz_box_6660_cable_cleanup");
    ///<summary>FRITZ!Box 6660 Cable Firmware update</summary>
    public ButtonEntity FritzBox6660CableFirmwareUpdate => new(_haContext, "button.fritz_box_6660_cable_firmware_update");
    ///<summary>FRITZ!Box 6660 Cable Reconnect</summary>
    public ButtonEntity FritzBox6660CableReconnect => new(_haContext, "button.fritz_box_6660_cable_reconnect");
    ///<summary>FRITZ!Box 6660 Cable Restart</summary>
    public ButtonEntity FritzBox6660CableRestart => new(_haContext, "button.fritz_box_6660_cable_restart");
    ///<summary>LivingRoomFP1 Reset nopresence status</summary>
    public ButtonEntity Livingroomfp1ResetNopresenceStatus => new(_haContext, "button.livingroomfp1_reset_nopresence_status");
    ///<summary>Node pve Reboot</summary>
    public ButtonEntity NodePveReboot => new(_haContext, "button.node_pve_reboot");
    ///<summary>Node pve Shutdown</summary>
    public ButtonEntity NodePveShutdown => new(_haContext, "button.node_pve_shutdown");
    ///<summary>PC cWalkingPadSpeedDown</summary>
    public ButtonEntity PcCwalkingpadspeeddown => new(_haContext, "button.pc_cwalkingpadspeeddown");
    ///<summary>PC PC_mediavolumedown</summary>
    public ButtonEntity PcMediavolumedown => new(_haContext, "button.pc_mediavolumedown");
    ///<summary>PC PC_mediavolumeup</summary>
    public ButtonEntity PcMediavolumeup => new(_haContext, "button.pc_mediavolumeup");
    ///<summary>PC PC-ResetBrigtness</summary>
    public ButtonEntity PcResetbrigtness => new(_haContext, "button.pc_resetbrigtness");
    ///<summary>PC PC Shutdown</summary>
    public ButtonEntity PcShutdown => new(_haContext, "button.pc_shutdown");
    ///<summary>PC PC_ShutDownCancel</summary>
    public ButtonEntity PcShutdowncancel => new(_haContext, "button.pc_shutdowncancel");
    ///<summary>PC StartRunningPadProcess</summary>
    public ButtonEntity PcStartrunningpadprocess => new(_haContext, "button.pc_startrunningpadprocess");
    ///<summary>PC StopWalkingPadProcess</summary>
    public ButtonEntity PcStopwalkingpadprocess => new(_haContext, "button.pc_stopwalkingpadprocess");
    ///<summary>PC PC_TurnOffMonitors</summary>
    public ButtonEntity PcTurnoffmonitors => new(_haContext, "button.pc_turnoffmonitors");
    ///<summary>PC PC_WakeKey</summary>
    public ButtonEntity PcWakekey => new(_haContext, "button.pc_wakekey");
    ///<summary>PC walkingpad_speedupone</summary>
    public ButtonEntity PcWalkingpadSpeedupone => new(_haContext, "button.pc_walkingpad_speedupone");
    ///<summary>PC WalkingpadProcessKill</summary>
    public ButtonEntity PcWalkingpadprocesskill => new(_haContext, "button.pc_walkingpadprocesskill");
    ///<summary>PC WalkingpadProcessRun</summary>
    public ButtonEntity PcWalkingpadprocessrun => new(_haContext, "button.pc_walkingpadprocessrun");
    ///<summary>PC WalkingPadSpeedUp</summary>
    public ButtonEntity PcWalkingpadspeedup => new(_haContext, "button.pc_walkingpadspeedup");
    ///<summary>PC WalkingPadToggle</summary>
    public ButtonEntity PcWalkingpadtoggle => new(_haContext, "button.pc_walkingpadtoggle");
    ///<summary>Starkvind Identify</summary>
    public ButtonEntity StarkvindIdentify => new(_haContext, "button.starkvind_identify");
    ///<summary>Google Assistant Synchronize devices</summary>
    public ButtonEntity SynchronizeDevices => new(_haContext, "button.synchronize_devices");
    ///<summary>Zigbee2MQTT Bridge Restart</summary>
    public ButtonEntity Zigbee2mqttBridgeRestart => new(_haContext, "button.zigbee2mqtt_bridge_restart");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Flashforge</summary>
    public DeviceTrackerEntity _385b6710C24002e4Aa3c7d1cb13026d1 => new(_haContext, "device_tracker.385b6710_c240_02e4_aa3c_7d1cb13026d1");
    ///<summary>android-4db5a5b9f2c9a5dd</summary>
    public DeviceTrackerEntity Android4db5a5b9f2c9a5dd => new(_haContext, "device_tracker.android_4db5a5b9f2c9a5dd");
    ///<summary>BL-65-34-64</summary>
    public DeviceTrackerEntity Bl653464 => new(_haContext, "device_tracker.bl_65_34_64");
    ///<summary>chromecastwithgoogletv</summary>
    public DeviceTrackerEntity Chromecastwithgoogletv => new(_haContext, "device_tracker.chromecastwithgoogletv");
    ///<summary>DESKTOP-9RQRGIO</summary>
    public DeviceTrackerEntity Desktop9rqrgio => new(_haContext, "device_tracker.desktop_9rqrgio");
    ///<summary>DESKTOP-K24V8NP</summary>
    public DeviceTrackerEntity DesktopK24v8np => new(_haContext, "device_tracker.desktop_k24v8np");
    ///<summary>Envy</summary>
    public DeviceTrackerEntity Envy => new(_haContext, "device_tracker.envy");
    ///<summary>Envy</summary>
    public DeviceTrackerEntity Envy2 => new(_haContext, "device_tracker.envy_2");
    ///<summary>esp32-A86888</summary>
    public DeviceTrackerEntity Esp32A86888 => new(_haContext, "device_tracker.esp32_a86888");
    ///<summary>Desktop-disctance</summary>
    public DeviceTrackerEntity Esp32Ee4b54 => new(_haContext, "device_tracker.esp32_ee4b54");
    ///<summary>ecoflow</summary>
    public DeviceTrackerEntity Espressif => new(_haContext, "device_tracker.espressif");
    ///<summary>Galaxy-A51</summary>
    public DeviceTrackerEntity GalaxyA51 => new(_haContext, "device_tracker.galaxy_a51");
    ///<summary>fuchsia-1c53-f9e1-9a4e</summary>
    public DeviceTrackerEntity GoogleNestHub => new(_haContext, "device_tracker.google_nest_hub");
    ///<summary>Google-Nest-Mini</summary>
    public DeviceTrackerEntity GoogleNestMini => new(_haContext, "device_tracker.google_nest_mini");
    ///<summary>homeAssistant</summary>
    public DeviceTrackerEntity Homeassistant => new(_haContext, "device_tracker.homeassistant");
    ///<summary>homeassistant</summary>
    public DeviceTrackerEntity Homeassistant2 => new(_haContext, "device_tracker.homeassistant_2");
    ///<summary>homeassistantcontainer</summary>
    public DeviceTrackerEntity Homeassistantcontainer => new(_haContext, "device_tracker.homeassistantcontainer");
    ///<summary>IR-Remote</summary>
    public DeviceTrackerEntity IrRemote => new(_haContext, "device_tracker.ir_remote");
    ///<summary>jaeaekaapinlaempoemittari</summary>
    public DeviceTrackerEntity Jaeaekaapinlaempoemittari => new(_haContext, "device_tracker.jaeaekaapinlaempoemittari");
    ///<summary>LAPTOP-RNUSI7LB</summary>
    public DeviceTrackerEntity LaptopRnusi7lb => new(_haContext, "device_tracker.laptop_rnusi7lb");
    ///<summary>Light-Sensor</summary>
    public DeviceTrackerEntity LightSensor => new(_haContext, "device_tracker.light_sensor");
    ///<summary>mainpc</summary>
    public DeviceTrackerEntity Mainpc => new(_haContext, "device_tracker.mainpc");
    ///<summary>maxciopistoke</summary>
    public DeviceTrackerEntity Maxciopistoke => new(_haContext, "device_tracker.maxciopistoke");
    ///<summary>mediaserver</summary>
    public DeviceTrackerEntity Mediaserver => new(_haContext, "device_tracker.mediaserver");
    ///<summary>mkspi</summary>
    public DeviceTrackerEntity Mkspi => new(_haContext, "device_tracker.mkspi");
    ///<summary>moto g(8) power lite</summary>
    public DeviceTrackerEntity MotoG8PowerLite => new(_haContext, "device_tracker.moto_g_8_power_lite");
    ///<summary>nintendoswitch</summary>
    public DeviceTrackerEntity Nintendoswitch => new(_haContext, "device_tracker.nintendoswitch");
    ///<summary>sleepanalyzer</summary>
    public DeviceTrackerEntity Pc192168021 => new(_haContext, "device_tracker.pc_192_168_0_21");
    ///<summary>switchlan</summary>
    public DeviceTrackerEntity Pc192168024 => new(_haContext, "device_tracker.pc_192_168_0_24");
    ///<summary>Jellyfin</summary>
    public DeviceTrackerEntity Pc5680C34602F8 => new(_haContext, "device_tracker.pc_56_80_c3_46_02_f8");
    ///<summary>minitemp-humiditysensor</summary>
    public DeviceTrackerEntity PcA09208902291 => new(_haContext, "device_tracker.pc_a0_92_08_90_22_91");
    ///<summary>DESKTOP-AOTDDD2</summary>
    public DeviceTrackerEntity PcB4Ae2bE4A3F8 => new(_haContext, "device_tracker.pc_b4_ae_2b_e4_a3_f8");
    ///<summary>Puhelin</summary>
    public DeviceTrackerEntity Puhelin => new(_haContext, "device_tracker.puhelin");
    ///<summary>Puhelin</summary>
    public DeviceTrackerEntity Puhelin2 => new(_haContext, "device_tracker.puhelin_2");
    ///<summary>raspberrypi</summary>
    public DeviceTrackerEntity Raspberrypi => new(_haContext, "device_tracker.raspberrypi");
    ///<summary>SM-T530</summary>
    public DeviceTrackerEntity SmT530 => new(_haContext, "device_tracker.sm_t530");
    ///<summary>Light-Sensor</summary>
    public DeviceTrackerEntity ToiletDisctance => new(_haContext, "device_tracker.toilet_disctance");
    ///<summary>Uno--Light-Sensor</summary>
    public DeviceTrackerEntity UnoLightSensor => new(_haContext, "device_tracker.uno_light_sensor");
    ///<summary>zatman-MacBookPro</summary>
    public DeviceTrackerEntity ZatmanMacbookpro => new(_haContext, "device_tracker.zatman_macbookpro");
    ///<summary>Zatnas</summary>
    public DeviceTrackerEntity Zatnas => new(_haContext, "device_tracker.zatnas");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Enabled</summary>
    public InputBooleanEntity Alarmenabled => new(_haContext, "input_boolean.alarmenabled");
    ///<summary>Auto Turn Off Server</summary>
    public InputBooleanEntity AutoTurnOffServer => new(_haContext, "input_boolean.auto_turn_off_server");
    ///<summary>Desktop Monitoring</summary>
    public InputBooleanEntity DesktopMonitoring => new(_haContext, "input_boolean.desktop_monitoring");
    ///<summary>Desktop Standing</summary>
    public InputBooleanEntity DesktopStanding => new(_haContext, "input_boolean.desktop_standing");
    ///<summary>Ecoflow Allow 0-Battery</summary>
    public InputBooleanEntity EcoflowAllow0Battery => new(_haContext, "input_boolean.ecoflow_allow_0_battery");
    ///<summary>Ecoflow Switchbot Helper</summary>
    public InputBooleanEntity EcoflowSwitchbotHelper => new(_haContext, "input_boolean.ecoflow_switchbot_helper");
    ///<summary>Ecopanel Slot 1 Enabled</summary>
    public InputBooleanEntity EcopanelS1Enabled => new(_haContext, "input_boolean.ecopanel_s1_enabled");
    ///<summary>Ecopanel Slot 2 Enabled</summary>
    public InputBooleanEntity EcopanelS2Enabled => new(_haContext, "input_boolean.ecopanel_s2_enabled");
    ///<summary>Ecopanel Slot 3 Enabled</summary>
    public InputBooleanEntity EcopanelS3Enabled => new(_haContext, "input_boolean.ecopanel_s3_enabled");
    ///<summary>Ecopanel Slot 4 Enabled</summary>
    public InputBooleanEntity EcopanelS4Enabled => new(_haContext, "input_boolean.ecopanel_s4_enabled");
    ///<summary>Guest Mode</summary>
    public InputBooleanEntity GuestMode => new(_haContext, "input_boolean.guest_mode");
    ///<summary>Hydration Check Active</summary>
    public InputBooleanEntity HydrationCheckActive => new(_haContext, "input_boolean.hydration_check_active");
    ///<summary>IsAsleep</summary>
    public InputBooleanEntity Isasleep => new(_haContext, "input_boolean.isasleep");
    ///<summary>IsHome</summary>
    public InputBooleanEntity Ishome => new(_haContext, "input_boolean.ishome");
    ///<summary>Media Playing</summary>
    public InputBooleanEntity MediaPlaying => new(_haContext, "input_boolean.media_playing");
    ///<summary>NAS On</summary>
    public InputBooleanEntity NasOn => new(_haContext, "input_boolean.nas_on");
    ///<summary>netdaemon_net_daemon_apps_apps_a0gbl</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsA0gbl => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_a0gbl");
    ///<summary>netdaemon_net_daemon_apps_apps_audio_output_monitor</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsAudioOutputMonitor => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_audio_output_monitor");
    ///<summary>netdaemon_net_daemon_apps_apps_auto_turn_offs</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsAutoTurnOffs => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_auto_turn_offs");
    ///<summary>netdaemon_net_daemon_apps_apps_eco_flow_manager</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsEcoFlowManager => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_eco_flow_manager");
    ///<summary>netdaemon_net_daemon_apps_apps_energy_monitor</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsEnergyMonitor => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_energy_monitor");
    ///<summary>netdaemon_net_daemon_apps_apps_hue_switches_livingroom_switch</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsHueSwitchesLivingroomSwitch => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_hue_switches_livingroom_switch");
    ///<summary>netdaemon_net_daemon_apps_apps_is_asleep_monitor</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsIsAsleepMonitor => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_is_asleep_monitor");
    ///<summary>netdaemon_net_daemon_apps_apps_is_home_manager</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsIsHomeManager => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_is_home_manager");
    ///<summary>netdaemon_net_daemon_apps_apps_knobs</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsKnobs => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_knobs");
    ///<summary>netdaemon_net_daemon_apps_apps_lights_kitchen_light</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLightsKitchenLight => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lights_kitchen_light");
    ///<summary>netdaemon_net_daemon_apps_apps_lights_lights_and_sensors</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLightsLightsAndSensors => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lights_lights_and_sensors");
    ///<summary>netdaemon_net_daemon_apps_apps_lights_livingroom_lights</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLightsLivingroomLights => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lights_livingroom_lights");
    ///<summary>netdaemon_net_daemon_apps_apps_lights_toiler_light_automation</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLightsToilerLightAutomation => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lights_toiler_light_automation");
    ///<summary>netdaemon_net_daemon_apps_apps_lora_tap_bed</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLoraTapBed => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lora_tap_bed");
    ///<summary>netdaemon_net_daemon_apps_apps_lora_tap_dekstop</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsLoraTapDekstop => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_lora_tap_dekstop");
    ///<summary>netdaemon_net_daemon_apps_apps_media_playing_monitor</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsMediaPlayingMonitor => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_media_playing_monitor");
    ///<summary>netdaemon_net_daemon_apps_apps_notifications</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsNotifications => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_notifications");
    ///<summary>netdaemon_net_daemon_apps_apps_starkvind</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsStarkvind => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_starkvind");
    ///<summary>netdaemon_net_daemon_apps_apps_step_counter</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsStepCounter => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_step_counter");
    ///<summary>netdaemon_net_daemon_apps_apps_tts</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAppsTts => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_apps_tts");
    ///<summary>Notification Alarm</summary>
    public InputBooleanEntity NotificationAlarm => new(_haContext, "input_boolean.notification_alarm");
    ///<summary>Notification Ecoflow</summary>
    public InputBooleanEntity NotificationEcoflow => new(_haContext, "input_boolean.notification_ecoflow");
    ///<summary>Notification Energy Daily Update</summary>
    public InputBooleanEntity NotificationEnergyDailyUpdate => new(_haContext, "input_boolean.notification_energy_daily_update");
    ///<summary>Notification Energy Price Change</summary>
    public InputBooleanEntity NotificationEnergyPriceChange => new(_haContext, "input_boolean.notification_energy_price_change");
    ///<summary>Notification Energy Solar</summary>
    public InputBooleanEntity NotificationEnergySolar => new(_haContext, "input_boolean.notification_energy_solar");
    ///<summary>Notification Gaming Time</summary>
    public InputBooleanEntity NotificationGamingTime => new(_haContext, "input_boolean.notification_gaming_time");
    ///<summary>Notification Humidifier</summary>
    public InputBooleanEntity NotificationHumidifier => new(_haContext, "input_boolean.notification_humidifier");
    ///<summary>Notification Hydration Check</summary>
    public InputBooleanEntity NotificationHydrationCheck => new(_haContext, "input_boolean.notification_hydration_check");
    ///<summary>Notification Memory Alert</summary>
    public InputBooleanEntity NotificationMemoryAlert => new(_haContext, "input_boolean.notification_memory_alert");
    ///<summary>Notification Phone Battery</summary>
    public InputBooleanEntity NotificationPhoneBattery => new(_haContext, "input_boolean.notification_phone_battery");
    ///<summary>Notification Standing</summary>
    public InputBooleanEntity NotificationStanding => new(_haContext, "input_boolean.notification_standing");
    ///<summary>Notification Step Counter</summary>
    public InputBooleanEntity NotificationStepCounter => new(_haContext, "input_boolean.notification_step_counter");
    ///<summary>Pf1 Living room - Region 1 Entered</summary>
    public InputBooleanEntity Pf1LrR1 => new(_haContext, "input_boolean.pf1_lr_r1");
    ///<summary>Pf1 Living room - Region 10 Entered</summary>
    public InputBooleanEntity Pf1LrR110 => new(_haContext, "input_boolean.pf1_lr_r110");
    ///<summary>Pf1 Living room - Region 2 Entered</summary>
    public InputBooleanEntity Pf1LrR2 => new(_haContext, "input_boolean.pf1_lr_r2");
    ///<summary>Pf1 Living room - Region 3 Entered</summary>
    public InputBooleanEntity Pf1LrR3 => new(_haContext, "input_boolean.pf1_lr_r3");
    ///<summary>Pf1 Living room - Region 4 Entered</summary>
    public InputBooleanEntity Pf1LrR4 => new(_haContext, "input_boolean.pf1_lr_r4");
    ///<summary>Pf1 Living room - Region 5 Entered</summary>
    public InputBooleanEntity Pf1LrR5 => new(_haContext, "input_boolean.pf1_lr_r5");
    ///<summary>Pf1 Living room - Region 6 Entered</summary>
    public InputBooleanEntity Pf1LrR6 => new(_haContext, "input_boolean.pf1_lr_r6");
    ///<summary>Pf1 Living room - Region 7 Entered</summary>
    public InputBooleanEntity Pf1LrR7 => new(_haContext, "input_boolean.pf1_lr_r7");
    ///<summary>Pf1 Living room - Region 8 Entered</summary>
    public InputBooleanEntity Pf1LrR8 => new(_haContext, "input_boolean.pf1_lr_r8");
    ///<summary>Pf1 Living room - Region 9 Entered</summary>
    public InputBooleanEntity Pf1LrR9 => new(_haContext, "input_boolean.pf1_lr_r9");
    ///<summary>Sensors Active</summary>
    public InputBooleanEntity SensorsActive => new(_haContext, "input_boolean.sensors_active");
    ///<summary>Should Send Audio Notifications</summary>
    public InputBooleanEntity ShouldSendAudioNotifications => new(_haContext, "input_boolean.should_send_audio_notifications");
    ///<summary>Starkvind OnByAuto</summary>
    public InputBooleanEntity StarkvindOnbyauto => new(_haContext, "input_boolean.starkvind_onbyauto");
    ///<summary>ToiletSeatHelper</summary>
    public InputBooleanEntity Toiletseathelper => new(_haContext, "input_boolean.toiletseathelper");
    ///<summary>Turn Off everything helper</summary>
    public InputBooleanEntity TurnOffEverythingHelper => new(_haContext, "input_boolean.turn_off_everything_helper");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Nap Duration</summary>
    public InputDatetimeEntity AlarmNapDuration => new(_haContext, "input_datetime.alarm_nap_duration");
    ///<summary>Alarm Sleep Duration</summary>
    public InputDatetimeEntity AlarmSleepDuration => new(_haContext, "input_datetime.alarm_sleep_duration");
    ///<summary>Alarm Target Time</summary>
    public InputDatetimeEntity AlarmTargetTime => new(_haContext, "input_datetime.alarm_target_time");
    ///<summary>AlarmTime</summary>
    public InputDatetimeEntity Alarmtime => new(_haContext, "input_datetime.alarmtime");
    ///<summary>AwokeTime</summary>
    public InputDatetimeEntity Awoketime => new(_haContext, "input_datetime.awoketime");
    ///<summary>Ecopanel Slot 1 Time</summary>
    public InputDatetimeEntity EcopanelS1Time => new(_haContext, "input_datetime.ecopanel_s1_time");
    ///<summary>Ecopanel Slot 2 Time</summary>
    public InputDatetimeEntity EcopanelS2Time => new(_haContext, "input_datetime.ecopanel_s2_time");
    ///<summary>Ecopanel Slot 3 Time</summary>
    public InputDatetimeEntity EcopanelS3Time => new(_haContext, "input_datetime.ecopanel_s3_time");
    ///<summary>Ecopanel Slot 4 Time</summary>
    public InputDatetimeEntity EcopanelS4Time => new(_haContext, "input_datetime.ecopanel_s4_time");
    ///<summary>Energy Change Time</summary>
    public InputDatetimeEntity EnergyChangeTime => new(_haContext, "input_datetime.energy_change_time");
    ///<summary>IsAsleepTimeHelper</summary>
    public InputDatetimeEntity Isasleephelper1 => new(_haContext, "input_datetime.isasleephelper1");
    ///<summary>LastIsAsleepTime</summary>
    public InputDatetimeEntity Lastisasleeptime => new(_haContext, "input_datetime.lastisasleeptime");
    ///<summary>LastKnownDate</summary>
    public InputDatetimeEntity Lastknowndate => new(_haContext, "input_datetime.lastknowndate");
    ///<summary>Next Planned EcoCharge</summary>
    public InputDatetimeEntity NextPlannedEcocharge => new(_haContext, "input_datetime.next_planned_ecocharge");
    ///<summary>Settings_Sleepduration</summary>
    public InputDatetimeEntity SettingsSleepduration => new(_haContext, "input_datetime.settings_sleepduration");
    ///<summary>SleepStartTime</summary>
    public InputDatetimeEntity Sleepstarttime => new(_haContext, "input_datetime.sleepstarttime");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Combined PC Energy + Fridge</summary>
    public InputNumberEntity CombinedPcEnergy => new(_haContext, "input_number.combined_pc_energy");
    ///<summary>Daily Energy Save Helper</summary>
    public InputNumberEntity DailyEnergySaveHelper => new(_haContext, "input_number.daily_energy_save_helper");
    ///<summary>DailySteps</summary>
    public InputNumberEntity Dailysteps => new(_haContext, "input_number.dailysteps");
    ///<summary>Ecoflow charge helper</summary>
    public InputNumberEntity EcoflowChargeHelper => new(_haContext, "input_number.ecoflow_charge_helper");
    ///<summary>Ecoflow Charing Cost</summary>
    public InputNumberEntity EcoflowCharingCost => new(_haContext, "input_number.ecoflow_charing_cost");
    ///<summary>Ecoflow Solar Recors</summary>
    public InputNumberEntity EcoflowSolarRecors => new(_haContext, "input_number.ecoflow_solar_recors");
    ///<summary>Ecopanel Slot 1 Power</summary>
    public InputNumberEntity EcopanelS1Power => new(_haContext, "input_number.ecopanel_s1_power");
    ///<summary>Ecopanel Slot 2 Power</summary>
    public InputNumberEntity EcopanelS2Power => new(_haContext, "input_number.ecopanel_s2_power");
    ///<summary>Ecopanel Slot 3 Power</summary>
    public InputNumberEntity EcopanelS3Power => new(_haContext, "input_number.ecopanel_s3_power");
    ///<summary>Ecopanel Slot 4 Power</summary>
    public InputNumberEntity EcopanelS34Power => new(_haContext, "input_number.ecopanel_s34_power");
    ///<summary>Electricity Price Fixer</summary>
    public InputNumberEntity ElectricityPriceFixer => new(_haContext, "input_number.electricity_price_fixer");
    ///<summary>Energy at start of hour</summary>
    public InputNumberEntity EnergyAtStartOfHour => new(_haContext, "input_number.energy_at_start_of_hour");
    ///<summary>Energy Cost Daily</summary>
    public InputNumberEntity EnergyCostDaily => new(_haContext, "input_number.energy_cost_daily");
    ///<summary>Energy Cost Hourly</summary>
    public InputNumberEntity EnergyCostHourly => new(_haContext, "input_number.energy_cost_hourly");
    ///<summary>Energy_Fortum_ALV</summary>
    public InputNumberEntity EnergyFortumAlv => new(_haContext, "input_number.energy_fortum_alv");
    ///<summary>Energy_Fortum_Hard_cost</summary>
    public InputNumberEntity EnergyFortumHardCost => new(_haContext, "input_number.energy_fortum_hard_cost");
    ///<summary>Energy Price Modifier</summary>
    public InputNumberEntity EnergyPriceModifier => new(_haContext, "input_number.energy_price_modifier");
    ///<summary>Energy_Transfer_ALV</summary>
    public InputNumberEntity EnergyTransferAlv => new(_haContext, "input_number.energy_transfer_alv");
    ///<summary>Energy_Transfer_cost</summary>
    public InputNumberEntity EnergyTransferCost => new(_haContext, "input_number.energy_transfer_cost");
    ///<summary>Freezer Preferred</summary>
    public InputNumberEntity FreezerPreferred => new(_haContext, "input_number.freezer_preferred");
    ///<summary>Last Know Step Threshold</summary>
    public InputNumberEntity LastKnowStepThreshold => new(_haContext, "input_number.last_know_step_threshold");
    ///<summary>Sensor Luminance Threshold</summary>
    public InputNumberEntity SensorLuminanceThreshold => new(_haContext, "input_number.sensor_luminance_threshold");
    ///<summary>Settings Default Knob Step</summary>
    public InputNumberEntity SettingsDefaultKnobStep => new(_haContext, "input_number.settings_default_knob_step");
    ///<summary>Settings Knob Sensitivity</summary>
    public InputNumberEntity SettingsKnobSensitivity => new(_haContext, "input_number.settings_knob_sensitivity");
    ///<summary>Settings_LaptopChargerTurnOnPercent</summary>
    public InputNumberEntity SettingsLaptopchargerturnonpercent => new(_haContext, "input_number.settings_laptopchargerturnonpercent");
    ///<summary>Settings_LightOnLuminancy</summary>
    public InputNumberEntity SettingsLightonluminancy => new(_haContext, "input_number.settings_lightonluminancy");
    ///<summary>Starkvind Default Speed</summary>
    public InputNumberEntity StarkvindDefaultSpeed => new(_haContext, "input_number.starkvind_default_speed");
    ///<summary>Starkvind Sleep Speed</summary>
    public InputNumberEntity StarkvindSleepSpeed => new(_haContext, "input_number.starkvind_sleep_speed");
    ///<summary>Temparature Outside Calibrated</summary>
    public InputNumberEntity TemparatureOutsideCalibrated => new(_haContext, "input_number.temparature_outside_calibrated");
    ///<summary>Total Daily Energy</summary>
    public InputNumberEntity TotalDailyEnergy => new(_haContext, "input_number.total_daily_energy");
    ///<summary>Walkingpad_Steps_Daily</summary>
    public InputNumberEntity WalkingpadStepsDaily => new(_haContext, "input_number.walkingpad_steps_daily");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Sleep Mode</summary>
    public InputSelectEntity AlarmSleepMode => new(_haContext, "input_select.alarm_sleep_mode");
    ///<summary>Asleep Modem Behaviour</summary>
    public InputSelectEntity AsleepModemBehaviour => new(_haContext, "input_select.asleep_modem_behaviour");
    ///<summary>AtLoraEnded</summary>
    public InputSelectEntity Atloraended => new(_haContext, "input_select.atloraended");
    ///<summary>Bed Knob Lights</summary>
    public InputSelectEntity BedKnobLights => new(_haContext, "input_select.bed_knob_lights");
    ///<summary>Brightlight Mode</summary>
    public InputSelectEntity BrightlightMode => new(_haContext, "input_select.brightlight_mode");
    ///<summary>Current AV Audio</summary>
    public InputSelectEntity CurrentAvAudio => new(_haContext, "input_select.current_av_audio");
    ///<summary>Desktop Knob Lights</summary>
    public InputSelectEntity DesktopKnobLights => new(_haContext, "input_select.desktop_knob_lights");
    ///<summary>Ecopanel Slot 1 Mode</summary>
    public InputSelectEntity EcopanelS1Mode => new(_haContext, "input_select.ecopanel_s1_mode");
    ///<summary>Ecopanel Slot 2 Mode</summary>
    public InputSelectEntity EcopanelS2Mode => new(_haContext, "input_select.ecopanel_s2_mode");
    ///<summary>Ecopanel Slot 3 Mode</summary>
    public InputSelectEntity EcopanelS3Mode => new(_haContext, "input_select.ecopanel_s3_mode");
    ///<summary>Ecopanel Slot 4 Mode</summary>
    public InputSelectEntity EcopanelS4Mode => new(_haContext, "input_select.ecopanel_s4_mode");
    ///<summary>ElectricityRanges</summary>
    public InputSelectEntity Electricityranges => new(_haContext, "input_select.electricityranges");
    ///<summary>Fridge Cooling Level</summary>
    public InputSelectEntity FridgeCoolingLevel => new(_haContext, "input_select.fridge_cooling_level");
    ///<summary>Living Room Lights</summary>
    public InputSelectEntity LivingRoomLights => new(_haContext, "input_select.living_room_lights");
    ///<summary>OnSleepBehaviour</summary>
    public InputSelectEntity Onsleepbehaviour => new(_haContext, "input_select.onsleepbehaviour");
    ///<summary>Power Saving Behaviour</summary>
    public InputSelectEntity PowerSavingBehaviour => new(_haContext, "input_select.power_saving_behaviour");
    ///<summary>Settings Ecoflow-mode</summary>
    public InputSelectEntity SettingsEcoflowMode => new(_haContext, "input_select.settings_ecoflow_mode");
    ///<summary>Sofa Knob Lights</summary>
    public InputSelectEntity SofaKnobLights => new(_haContext, "input_select.sofa_knob_lights");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>FP1Debugger</summary>
    public InputTextEntity Fp1debugger => new(_haContext, "input_text.fp1debugger");
    ///<summary>Withings Sleep State</summary>
    public InputTextEntity WithingsSleepState => new(_haContext, "input_text.withings_sleep_state");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>All Lights</summary>
    public LightEntity AllLights => new(_haContext, "light.all_lights");
    ///<summary>AwakeLights</summary>
    public LightEntity Awakelights => new(_haContext, "light.awakelights");
    ///<summary>Bed Knob Lights</summary>
    public LightEntity BedKnobLights => new(_haContext, "light.bed_knob_lights");
    ///<summary>Bed Light</summary>
    public LightEntity BedLight => new(_haContext, "light.bed_light");
    ///<summary>Desktop Knob Lights</summary>
    public LightEntity DesktopKnobLights => new(_haContext, "light.desktop_knob_lights");
    ///<summary>Wake light</summary>
    public LightEntity DesktopLight => new(_haContext, "light.desktop_light");
    ///<summary>Hallway Light</summary>
    public LightEntity HallwayLight => new(_haContext, "light.hallway_light");
    ///<summary>Kitchen Light</summary>
    public LightEntity KitchenLight2 => new(_haContext, "light.kitchen_light_2");
    ///<summary>Living Room Light</summary>
    public LightEntity LivingRoomLight => new(_haContext, "light.living_room_light");
    ///<summary>Living Room Lights</summary>
    public LightEntity LivingRoomLights => new(_haContext, "light.living_room_lights");
    ///<summary>Monitor Light</summary>
    public LightEntity MonitorLight => new(_haContext, "light.monitor_light");
    ///<summary>monitorlight</summary>
    public LightEntity Monitorlight => new(_haContext, "light.monitorlight");
    ///<summary>Multi Plug: Bright Light</summary>
    public LightEntity MultiPlugBrightLight => new(_haContext, "light.multi_plug_bright_light");
    ///<summary>Bright Light</summary>
    public LightEntity PcMultipowermeterL1 => new(_haContext, "light.pc_multipowermeter_l1");
    ///<summary>Sofa Knob Lights</summary>
    public LightEntity SofaKnobLights => new(_haContext, "light.sofa_knob_lights");
    ///<summary>Storage Light</summary>
    public LightEntity StorageLight2 => new(_haContext, "light.storage_light_2");
    ///<summary>Toilet Light_1</summary>
    public LightEntity ToiletLight1 => new(_haContext, "light.toilet_light_1");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>BigFridge-Powermeter Child lock</summary>
    public LockEntity BigfridgePowermeterChildLock => new(_haContext, "lock.bigfridge_powermeter_child_lock");
    ///<summary>Inkplate-plug Child lock</summary>
    public LockEntity InkplatePlugChildLock => new(_haContext, "lock.inkplate_plug_child_lock");
    ///<summary>Kitchen PowerMeter-Plug Child lock</summary>
    public LockEntity KitchenPowermeterPlugChildLock => new(_haContext, "lock.kitchen_powermeter_plug_child_lock");
    ///<summary>Misc-PowerMeter Child lock</summary>
    public LockEntity MiscPowermeterChildLock => new(_haContext, "lock.misc_powermeter_child_lock");
    ///<summary>Modem and Proxmox PowerMeter Child lock</summary>
    public LockEntity ModemAndProxmoxPowermeterChildLock => new(_haContext, "lock.modem_and_proxmox_powermeter_child_lock");
    ///<summary>Modem Auto On Plug Child lock</summary>
    public LockEntity ModemAutoOnPlugChildLock => new(_haContext, "lock.modem_auto_on_plug_child_lock");
    ///<summary>PC-Plug Child lock</summary>
    public LockEntity PcPlugChildLock => new(_haContext, "lock.pc_plug_child_lock");
    ///<summary>TBD-PowerMeter Child lock</summary>
    public LockEntity TbdPowermeterChildLock => new(_haContext, "lock.tbd_powermeter_child_lock");
    ///<summary>Toilet Power Plug Child lock</summary>
    public LockEntity ToiletPowerPlugChildLock => new(_haContext, "lock.toilet_power_plug_child_lock");
    ///<summary>Tv Power Meter Child lock</summary>
    public LockEntity TvPowerMeterChildLock => new(_haContext, "lock.tv_power_meter_child_lock");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>All Media Players</summary>
    public MediaPlayerEntity AllMediaPlayers => new(_haContext, "media_player.all_media_players");
    ///<summary>ENVY</summary>
    public MediaPlayerEntity Envy => new(_haContext, "media_player.envy");
    ///<summary>HeadphoneSpeakers</summary>
    public MediaPlayerEntity Headphonespeakers => new(_haContext, "media_player.headphonespeakers");
    ///<summary>Living room display</summary>
    public MediaPlayerEntity LivingRoomDisplay => new(_haContext, "media_player.living_room_display");
    ///<summary>Living room display</summary>
    public MediaPlayerEntity LivingRoomDisplay2 => new(_haContext, "media_player.living_room_display_2");
    public MediaPlayerEntity LivingRoomTv => new(_haContext, "media_player.living_room_tv");
    ///<summary>Living room display</summary>
    public MediaPlayerEntity MusicAssistant => new(_haContext, "media_player.music_assistant");
    public MediaPlayerEntity OlohuoneNest => new(_haContext, "media_player.olohuone_nest");
    ///<summary>PC</summary>
    public MediaPlayerEntity Pc => new(_haContext, "media_player.pc");
    ///<summary>VLC-TELNET</summary>
    public MediaPlayerEntity VlcTelnet => new(_haContext, "media_player.vlc_telnet");
    ///<summary>VLC-TELNET</summary>
    public MediaPlayerEntity VlcTelnet3 => new(_haContext, "media_player.vlc_telnet_3");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>PC Sensor Occupancy timeout</summary>
    public NumberEntity _0x001788010bcfb16fOccupancyTimeout => new(_haContext, "number.0x001788010bcfb16f_occupancy_timeout");
    ///<summary>BigFridge-Powermeter Countdown</summary>
    public NumberEntity BigfridgePowermeterCountdown => new(_haContext, "number.bigfridge_powermeter_countdown");
    ///<summary>Ecoflow AC Charging Power</summary>
    public NumberEntity EcoflowAcChargingPower => new(_haContext, "number.ecoflow_ac_charging_power");
    ///<summary>Ecoflow Backup Reserve Level</summary>
    public NumberEntity EcoflowBackupReserveLevel => new(_haContext, "number.ecoflow_backup_reserve_level");
    ///<summary>Ecoflow Generator Auto Start Level</summary>
    public NumberEntity EcoflowGeneratorAutoStartLevel => new(_haContext, "number.ecoflow_generator_auto_start_level");
    ///<summary>Ecoflow Generator Auto Stop Level</summary>
    public NumberEntity EcoflowGeneratorAutoStopLevel => new(_haContext, "number.ecoflow_generator_auto_stop_level");
    ///<summary>Ecoflow Max Charge Level</summary>
    public NumberEntity EcoflowMaxChargeLevel => new(_haContext, "number.ecoflow_max_charge_level");
    ///<summary>Ecoflow Min Discharge Level</summary>
    public NumberEntity EcoflowMinDischargeLevel => new(_haContext, "number.ecoflow_min_discharge_level");
    ///<summary>Hallway Sensor Occupancy timeout</summary>
    public NumberEntity HallwaySensorOccupancyTimeout => new(_haContext, "number.hallway_sensor_occupancy_timeout");
    ///<summary>Inkplate-plug Countdown</summary>
    public NumberEntity InkplatePlugCountdown => new(_haContext, "number.inkplate_plug_countdown");
    ///<summary>Kitchen PowerMeter-Plug Countdown</summary>
    public NumberEntity KitchenPowermeterPlugCountdown => new(_haContext, "number.kitchen_powermeter_plug_countdown");
    ///<summary>Kitchen Sensor Occupancy timeout</summary>
    public NumberEntity KitchenSensorOccupancyTimeout => new(_haContext, "number.kitchen_sensor_occupancy_timeout");
    ///<summary>Misc-PowerMeter Countdown</summary>
    public NumberEntity MiscPowermeterCountdown => new(_haContext, "number.misc_powermeter_countdown");
    ///<summary>Modem and Proxmox PowerMeter Countdown</summary>
    public NumberEntity ModemAndProxmoxPowermeterCountdown => new(_haContext, "number.modem_and_proxmox_powermeter_countdown");
    ///<summary>Outdoors Brightness</summary>
    public NumberEntity OutdoorsBrightness => new(_haContext, "number.outdoors_brightness");
    ///<summary>PC-Plug Countdown</summary>
    public NumberEntity PcPlugCountdown => new(_haContext, "number.pc_plug_countdown");
    ///<summary>Switchbot Ecoflow Delay</summary>
    public NumberEntity SwitchbotEcoflowDelay => new(_haContext, "number.switchbot_ecoflow_delay");
    ///<summary>Switchbot Ecoflow Lower</summary>
    public NumberEntity SwitchbotEcoflowLower => new(_haContext, "number.switchbot_ecoflow_lower");
    ///<summary>Switchbot Ecoflow Upper</summary>
    public NumberEntity SwitchbotEcoflowUpper => new(_haContext, "number.switchbot_ecoflow_upper");
    ///<summary>TBD-PowerMeter Countdown</summary>
    public NumberEntity TbdPowermeterCountdown => new(_haContext, "number.tbd_powermeter_countdown");
    ///<summary>Toilet Power Plug Countdown</summary>
    public NumberEntity ToiletPowerPlugCountdown => new(_haContext, "number.toilet_power_plug_countdown");
    ///<summary>Toilet Sensor Occupancy timeout</summary>
    public NumberEntity ToiletSensorOccupancyTimeout => new(_haContext, "number.toilet_sensor_occupancy_timeout");
    ///<summary>Tv Power Meter Countdown</summary>
    public NumberEntity TvPowerMeterCountdown => new(_haContext, "number.tv_power_meter_countdown");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Petteri</summary>
    public PersonEntity Petteri => new(_haContext, "person.petteri");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>-Active Audio- Game</summary>
    public SceneEntity ActiveAudioGame => new(_haContext, "scene.active_audio_game");
    ///<summary>-Active Audio-  OFF</summary>
    public SceneEntity ActiveAudioOff => new(_haContext, "scene.active_audio_off");
    ///<summary>-Active Audio- Portable</summary>
    public SceneEntity ActiveAudioPortable => new(_haContext, "scene.active_audio_portable");
    ///<summary>CurrentElecticityPriceReadout</summary>
    public SceneEntity Currentelecticitypricereadout => new(_haContext, "scene.currentelecticitypricereadout");
    ///<summary>Monitor Light MonitorLightOn</summary>
    public SceneEntity MonitorLight1Monitorlighton => new(_haContext, "scene.monitor_light_1_monitorlighton");
    ///<summary>Monitor Light MonitorLightOff</summary>
    public SceneEntity MonitorLight2Monitorlightoff => new(_haContext, "scene.monitor_light_2_monitorlightoff");
    ///<summary>monitorlight Scene 0</summary>
    public SceneEntity Monitorlight0Scene0 => new(_haContext, "scene.monitorlight_0_scene_0");
    ///<summary>monitorlight Scene 1</summary>
    public SceneEntity Monitorlight1Scene1 => new(_haContext, "scene.monitorlight_1_scene_1");
    ///<summary>Out of home state</summary>
    public SceneEntity OutOfHomeState => new(_haContext, "scene.out_of_home_state");
    ///<summary>-Active Audio- PC</summary>
    public SceneEntity PcAudioActive => new(_haContext, "scene.pc_audio_active");
    ///<summary>PC ON AUTO</summary>
    public SceneEntity PcOnAuto => new(_haContext, "scene.pc_on_auto");
    ///<summary>Read Out Awake Time</summary>
    public SceneEntity ReadOutAwakeTime => new(_haContext, "scene.read_out_awake_time");
    ///<summary>-Active Audio-  TV</summary>
    public SceneEntity TvAudioActive => new(_haContext, "scene.tv_audio_active");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>(Script)AV Audio Off </summary>
    public ScriptEntity _1659477669028 => new(_haContext, "script.1659477669028");
    ///<summary>ActionToDoAtAlarm</summary>
    public ScriptEntity Actiontodoatalarm => new(_haContext, "script.actiontodoatalarm");
    ///<summary>AV - Volume - Down</summary>
    public ScriptEntity AvVolumeDown => new(_haContext, "script.av_volume_down");
    ///<summary>AV - Volume - Up</summary>
    public ScriptEntity AvVolumeUp => new(_haContext, "script.av_volume_up");
    ///<summary>ClearPlaylists</summary>
    public ScriptEntity Clearplaylists => new(_haContext, "script.clearplaylists");
    ///<summary>Launch Youtube</summary>
    public ScriptEntity LaunchYoutube => new(_haContext, "script.launch_youtube");
    ///<summary>Send Audio Notification</summary>
    public ScriptEntity NotifyPushover => new(_haContext, "script.notify_pushover");
    ///<summary>(PC)Cancel_Shut_Down</summary>
    public ScriptEntity PccancelShutDown => new(_haContext, "script.pccancel_shut_down");
    ///<summary>(PC)Turn Off PC</summary>
    public ScriptEntity PcturnOffPc => new(_haContext, "script.pcturn_off_pc");
    ///<summary>Play Interface Sound</summary>
    public ScriptEntity PlayInterfaceSound => new(_haContext, "script.play_interface_sound");
    ///<summary>Play Morning Music</summary>
    public ScriptEntity PlayMorningMusic => new(_haContext, "script.play_morning_music");
    ///<summary>PlayMoomin</summary>
    public ScriptEntity Playmoomin => new(_haContext, "script.playmoomin");
    ///<summary>Power Saving Mode</summary>
    public ScriptEntity PowerSavingMode => new(_haContext, "script.power_saving_mode");
    ///<summary>Read Out Electricity Price</summary>
    public ScriptEntity ReadOutElectricityPrice => new(_haContext, "script.read_out_electricity_price");
    ///<summary>Readout LastTime Awoken</summary>
    public ScriptEntity ReadoutLasttimeAwoken => new(_haContext, "script.readout_lasttime_awoken");
    ///<summary>Readout Time</summary>
    public ScriptEntity ReadoutTime => new(_haContext, "script.readout_time");
    ///<summary>Refresh Inkplate</summary>
    public ScriptEntity RefreshInkplate => new(_haContext, "script.refresh_inkplate");
    ///<summary>Refresh Inkplate (Instant)</summary>
    public ScriptEntity RefreshInkplateInstant => new(_haContext, "script.refresh_inkplate_instant");
    ///<summary>Reset All Powermeters</summary>
    public ScriptEntity ResetAllPowermeters => new(_haContext, "script.reset_all_powermeters");
    ///<summary>Restart Modem</summary>
    public ScriptEntity RestartModem => new(_haContext, "script.restart_modem");
    ///<summary>Send Audio Notification TTS</summary>
    public ScriptEntity SendAudioNotification => new(_haContext, "script.send_audio_notification");
    ///<summary>Send Audio Notification File</summary>
    public ScriptEntity SendAudioNotificationFile => new(_haContext, "script.send_audio_notification_file");
    ///<summary>SendIsHomePhoneNotification</summary>
    public ScriptEntity Sendishomephonenotification => new(_haContext, "script.sendishomephonenotification");
    ///<summary>Turn Off Everything</summary>
    public ScriptEntity TurnOffEverything => new(_haContext, "script.turn_off_everything");
    ///<summary>Turn Off Proxmox and Server</summary>
    public ScriptEntity TurnOffProxmoxAndServer => new(_haContext, "script.turn_off_proxmox_and_server");
    ///<summary>Turn Off Server</summary>
    public ScriptEntity TurnOffServer => new(_haContext, "script.turn_off_server");
    ///<summary>Turn on PC For Lora</summary>
    public ScriptEntity TurnOnPcForLora => new(_haContext, "script.turn_on_pc_for_lora");
    ///<summary>Turn on PC Normal</summary>
    public ScriptEntity TurnOnPcNormal => new(_haContext, "script.turn_on_pc_normal");
    ///<summary>Turn On Server</summary>
    public ScriptEntity TurnOnServer => new(_haContext, "script.turn_on_server");
    ///<summary>Turn On Server (Manual)</summary>
    public ScriptEntity TurnOnServerManual => new(_haContext, "script.turn_on_server_manual");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>PC Sensor Motion sensitivity</summary>
    public SelectEntity _0x001788010bcfb16fMotionSensitivity => new(_haContext, "select.0x001788010bcfb16f_motion_sensitivity");
    ///<summary>Bed Knob Operation mode</summary>
    public SelectEntity BedKnobOperationMode => new(_haContext, "select.bed_knob_operation_mode");
    ///<summary>Bed Light Power-on behavior</summary>
    public SelectEntity BedLightPowerOnBehavior => new(_haContext, "select.bed_light_power_on_behavior");
    ///<summary>Bed-Multi-Plug Power-on behavior</summary>
    public SelectEntity BedMultiPlugPowerOnBehavior => new(_haContext, "select.bed_multi_plug_power_on_behavior");
    ///<summary>BigFridge-Powermeter Indicator mode</summary>
    public SelectEntity BigfridgePowermeterIndicatorMode => new(_haContext, "select.bigfridge_powermeter_indicator_mode");
    ///<summary>BigFridge-Powermeter Power outage memory</summary>
    public SelectEntity BigfridgePowermeterPowerOutageMemory => new(_haContext, "select.bigfridge_powermeter_power_outage_memory");
    ///<summary>Desktop Light Power-on behavior</summary>
    public SelectEntity DesktopLightPowerOnBehavior => new(_haContext, "select.desktop_light_power_on_behavior");
    ///<summary>Ecoflow AC Timeout</summary>
    public SelectEntity EcoflowAcTimeout => new(_haContext, "select.ecoflow_ac_timeout");
    ///<summary>Ecoflow DC (12V) Charge Current</summary>
    public SelectEntity EcoflowDc12vChargeCurrent => new(_haContext, "select.ecoflow_dc_12v_charge_current");
    ///<summary>Ecoflow DC (12V) Timeout</summary>
    public SelectEntity EcoflowDc12vTimeout => new(_haContext, "select.ecoflow_dc_12v_timeout");
    ///<summary>Ecoflow Screen Timeout</summary>
    public SelectEntity EcoflowScreenTimeout => new(_haContext, "select.ecoflow_screen_timeout");
    ///<summary>Ecoflow Unit Timeout</summary>
    public SelectEntity EcoflowUnitTimeout => new(_haContext, "select.ecoflow_unit_timeout");
    ///<summary>Hallway Light Power-on behavior</summary>
    public SelectEntity HallwayLightPowerOnBehavior => new(_haContext, "select.hallway_light_power_on_behavior");
    ///<summary>Hallway Sensor Motion sensitivity</summary>
    public SelectEntity HallwaySensorMotionSensitivity => new(_haContext, "select.hallway_sensor_motion_sensitivity");
    ///<summary>Inkplate-plug Indicator mode</summary>
    public SelectEntity InkplatePlugIndicatorMode => new(_haContext, "select.inkplate_plug_indicator_mode");
    ///<summary>Inkplate-plug Power outage memory</summary>
    public SelectEntity InkplatePlugPowerOutageMemory => new(_haContext, "select.inkplate_plug_power_outage_memory");
    ///<summary>Kitchen Light Power-on behavior</summary>
    public SelectEntity KitchenLightPowerOnBehavior => new(_haContext, "select.kitchen_light_power_on_behavior");
    ///<summary>Kitchen PowerMeter-Plug Indicator mode</summary>
    public SelectEntity KitchenPowermeterPlugIndicatorMode => new(_haContext, "select.kitchen_powermeter_plug_indicator_mode");
    ///<summary>Kitchen PowerMeter-Plug Power outage memory</summary>
    public SelectEntity KitchenPowermeterPlugPowerOutageMemory => new(_haContext, "select.kitchen_powermeter_plug_power_outage_memory");
    ///<summary>Kitchen Sensor Motion sensitivity</summary>
    public SelectEntity KitchenSensorMotionSensitivity => new(_haContext, "select.kitchen_sensor_motion_sensitivity");
    ///<summary>Knob Couch Operation mode</summary>
    public SelectEntity KnobCouchOperationMode => new(_haContext, "select.knob_couch_operation_mode");
    ///<summary>Knob Desktop Operation mode</summary>
    public SelectEntity KnobDesktopOperationMode => new(_haContext, "select.knob_desktop_operation_mode");
    ///<summary>Living Room Light Power-on behavior</summary>
    public SelectEntity LivingRoomLightPowerOnBehavior => new(_haContext, "select.living_room_light_power_on_behavior");
    ///<summary>LivingRoomFP1 Approach distance</summary>
    public SelectEntity Livingroomfp1ApproachDistance => new(_haContext, "select.livingroomfp1_approach_distance");
    ///<summary>LivingRoomFP1 Monitoring mode</summary>
    public SelectEntity Livingroomfp1MonitoringMode => new(_haContext, "select.livingroomfp1_monitoring_mode");
    ///<summary>LivingRoomFP1 Motion sensitivity</summary>
    public SelectEntity Livingroomfp1MotionSensitivity => new(_haContext, "select.livingroomfp1_motion_sensitivity");
    ///<summary>Misc-PowerMeter Indicator mode</summary>
    public SelectEntity MiscPowermeterIndicatorMode => new(_haContext, "select.misc_powermeter_indicator_mode");
    ///<summary>Misc-PowerMeter Power outage memory</summary>
    public SelectEntity MiscPowermeterPowerOutageMemory => new(_haContext, "select.misc_powermeter_power_outage_memory");
    ///<summary>Modem and Proxmox PowerMeter Indicator mode</summary>
    public SelectEntity ModemAndProxmoxPowermeterIndicatorMode => new(_haContext, "select.modem_and_proxmox_powermeter_indicator_mode");
    ///<summary>Modem and Proxmox PowerMeter Power outage memory</summary>
    public SelectEntity ModemAndProxmoxPowermeterPowerOutageMemory => new(_haContext, "select.modem_and_proxmox_powermeter_power_outage_memory");
    ///<summary>Modem Auto On Plug Indicator mode</summary>
    public SelectEntity ModemAutoOnPlugIndicatorMode => new(_haContext, "select.modem_auto_on_plug_indicator_mode");
    ///<summary>Modem Auto On Plug Power outage memory</summary>
    public SelectEntity ModemAutoOnPlugPowerOutageMemory => new(_haContext, "select.modem_auto_on_plug_power_outage_memory");
    ///<summary>Monitor Light Power-on behavior</summary>
    public SelectEntity MonitorLightPowerOnBehavior => new(_haContext, "select.monitor_light_power_on_behavior");
    ///<summary>PC-MultiPowerMeter Power outage memory</summary>
    public SelectEntity PcMultipowermeterPowerOutageMemory => new(_haContext, "select.pc_multipowermeter_power_outage_memory");
    ///<summary>PC-Plug Indicator mode</summary>
    public SelectEntity PcPlugIndicatorMode => new(_haContext, "select.pc_plug_indicator_mode");
    ///<summary>PC-Plug Power outage memory</summary>
    public SelectEntity PcPlugPowerOutageMemory => new(_haContext, "select.pc_plug_power_outage_memory");
    ///<summary>Storage Light Power-on behavior</summary>
    public SelectEntity StorageLightPowerOnBehavior => new(_haContext, "select.storage_light_power_on_behavior");
    ///<summary>Switchbot Ecoflow Mode</summary>
    public SelectEntity SwitchbotEcoflowMode => new(_haContext, "select.switchbot_ecoflow_mode");
    ///<summary>TBD-PowerMeter Indicator mode</summary>
    public SelectEntity TbdPowermeterIndicatorMode => new(_haContext, "select.tbd_powermeter_indicator_mode");
    ///<summary>TBD-PowerMeter Power outage memory</summary>
    public SelectEntity TbdPowermeterPowerOutageMemory => new(_haContext, "select.tbd_powermeter_power_outage_memory");
    ///<summary>Toilet Light_1 Power-on behavior</summary>
    public SelectEntity ToiletLight1PowerOnBehavior => new(_haContext, "select.toilet_light_1_power_on_behavior");
    ///<summary>Toilet Power Plug Indicator mode</summary>
    public SelectEntity ToiletPowerPlugIndicatorMode => new(_haContext, "select.toilet_power_plug_indicator_mode");
    ///<summary>Toilet Power Plug Power outage memory</summary>
    public SelectEntity ToiletPowerPlugPowerOutageMemory => new(_haContext, "select.toilet_power_plug_power_outage_memory");
    ///<summary>Toilet Sensor Motion sensitivity</summary>
    public SelectEntity ToiletSensorMotionSensitivity => new(_haContext, "select.toilet_sensor_motion_sensitivity");
    ///<summary>Tv Power Meter Indicator mode</summary>
    public SelectEntity TvPowerMeterIndicatorMode => new(_haContext, "select.tv_power_meter_indicator_mode");
    ///<summary>Tv Power Meter Power outage memory</summary>
    public SelectEntity TvPowerMeterPowerOutageMemory => new(_haContext, "select.tv_power_meter_power_outage_memory");
    ///<summary>Zigbee2MQTT Bridge Log level</summary>
    public SelectEntity Zigbee2mqttBridgeLogLevel => new(_haContext, "select.zigbee2mqtt_bridge_log_level");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>All standby energy</summary>
    public SensorEntity AllStandbyEnergy => new(_haContext, "sensor.all_standby_energy");
    ///<summary>Awake Today</summary>
    public SensorEntity AwakeToday => new(_haContext, "sensor.awake_today");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Bed Knob Action rate</summary>
    public SensorEntity BedKnobActionRate => new(_haContext, "sensor.bed_knob_action_rate");
    ///<summary>Bed Knob Action step size</summary>
    public SensorEntity BedKnobActionStepSize => new(_haContext, "sensor.bed_knob_action_step_size");
    ///<summary>Cube Action from side</summary>
    public SensorEntity CubeActionFromSide => new(_haContext, "sensor.cube_action_from_side");
    ///<summary>Cube Action side</summary>
    public SensorEntity CubeActionSide => new(_haContext, "sensor.cube_action_side");
    ///<summary>Cube Action to side</summary>
    public SensorEntity CubeActionToSide => new(_haContext, "sensor.cube_action_to_side");
    ///<summary>Cube Power outage count</summary>
    public SensorEntity CubePowerOutageCount => new(_haContext, "sensor.cube_power_outage_count");
    ///<summary>Cube Side</summary>
    public SensorEntity CubeSide => new(_haContext, "sensor.cube_side");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Node</summary>
    public SensorEntity DiskPveDevSdaNode => new(_haContext, "sensor.disk_pve_dev_sda_node");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Power cycles</summary>
    public SensorEntity DiskPveDevSdaPowerCycles => new(_haContext, "sensor.disk_pve_dev_sda_power_cycles");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Unexpected power loss</summary>
    public SensorEntity DiskPveDevSdaUnexpectedPowerLoss => new(_haContext, "sensor.disk_pve_dev_sda_unexpected_power_loss");
    ///<summary>Disk pve: One Touch HDD (/dev/sdb) Node</summary>
    public SensorEntity DiskPveOneTouchHddDevSdbNode => new(_haContext, "sensor.disk_pve_one_touch_hdd_dev_sdb_node");
    ///<summary>Power cycles</summary>
    public SensorEntity DiskPveSt6000ne0002kr101DevSdbPowerCycles => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdb_power_cycles");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Node</summary>
    public SensorEntity DiskPveSt6000ne0002kr101DevSdcNode => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_node");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Power cycles</summary>
    public SensorEntity DiskPveSt6000ne0002kr101DevSdcPowerCycles => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_power_cycles");
    ///<summary>Unexpected power loss</summary>
    public SensorEntity DiskPveWdcWds200t1r0a68a4w0DevSdcUnexpectedPowerLoss => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdc_unexpected_power_loss");
    ///<summary>Node</summary>
    public SensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddNode => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_node");
    ///<summary>Power cycles</summary>
    public SensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddPowerCycles => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_power_cycles");
    ///<summary>Unexpected power loss</summary>
    public SensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddUnexpectedPowerLoss => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_unexpected_power_loss");
    ///<summary>Discharging</summary>
    public SensorEntity EcoflowChargeOrRemainTime => new(_haContext, "sensor.ecoflow_charge_or_remain_time");
    ///<summary>Ecoflow Charge State</summary>
    public SensorEntity EcoflowChargeState => new(_haContext, "sensor.ecoflow_charge_state");
    ///<summary>Ecoflow Cycles</summary>
    public SensorEntity EcoflowCycles => new(_haContext, "sensor.ecoflow_cycles");
    ///<summary>Ecoflow Status</summary>
    public SensorEntity EcoflowStatus => new(_haContext, "sensor.ecoflow_status");
    ///<summary>ENVY DISPLAY1</summary>
    public SensorEntity EnvyAf23e0979eb24481B7364ba0185e480aDisplay1 => new(_haContext, "sensor.envy_af23e097_9eb2_4481_b736_4ba0185e480a_display1");
    ///<summary>ENVY DISPLAY2</summary>
    public SensorEntity EnvyAf23e0979eb24481B7364ba0185e480aDisplay2 => new(_haContext, "sensor.envy_af23e097_9eb2_4481_b736_4ba0185e480a_display2");
    ///<summary>ENVY DISPLAY3</summary>
    public SensorEntity EnvyAf23e0979eb24481B7364ba0185e480aDisplay3 => new(_haContext, "sensor.envy_af23e097_9eb2_4481_b736_4ba0185e480a_display3");
    ///<summary>ENVY Default Device</summary>
    public SensorEntity EnvyAudioDefaultDevice => new(_haContext, "sensor.envy_audio_default_device");
    ///<summary>ENVY Default Device Muted</summary>
    public SensorEntity EnvyAudioDefaultDeviceMuted => new(_haContext, "sensor.envy_audio_default_device_muted");
    ///<summary>ENVY Default Device State</summary>
    public SensorEntity EnvyAudioDefaultDeviceState => new(_haContext, "sensor.envy_audio_default_device_state");
    ///<summary>ENVY Default Device Volume</summary>
    public SensorEntity EnvyAudioDefaultDeviceVolume => new(_haContext, "sensor.envy_audio_default_device_volume");
    ///<summary>ENVY Default Input Device</summary>
    public SensorEntity EnvyAudioDefaultInputDevice => new(_haContext, "sensor.envy_audio_default_input_device");
    ///<summary>ENVY Default Input Device Muted</summary>
    public SensorEntity EnvyAudioDefaultInputDeviceMuted => new(_haContext, "sensor.envy_audio_default_input_device_muted");
    ///<summary>ENVY Default Input Device State</summary>
    public SensorEntity EnvyAudioDefaultInputDeviceState => new(_haContext, "sensor.envy_audio_default_input_device_state");
    ///<summary>ENVY Default Input Device Volume</summary>
    public SensorEntity EnvyAudioDefaultInputDeviceVolume => new(_haContext, "sensor.envy_audio_default_input_device_volume");
    ///<summary>ENVY Audio Input Devices</summary>
    public SensorEntity EnvyAudioInputDevices => new(_haContext, "sensor.envy_audio_input_devices");
    ///<summary>ENVY Audio Output Devices</summary>
    public SensorEntity EnvyAudioOutputDevices => new(_haContext, "sensor.envy_audio_output_devices");
    ///<summary>ENVY Peak Volume</summary>
    public SensorEntity EnvyAudioPeakVolume => new(_haContext, "sensor.envy_audio_peak_volume");
    ///<summary>ENVY Audio Sessions</summary>
    public SensorEntity EnvyAudioSessions => new(_haContext, "sensor.envy_audio_sessions");
    ///<summary>ENVY Charge Remaining</summary>
    public SensorEntity EnvyBatteryChargeRemaining => new(_haContext, "sensor.envy_battery_charge_remaining");
    ///<summary>ENVY Charge Status</summary>
    public SensorEntity EnvyBatteryChargeStatus => new(_haContext, "sensor.envy_battery_charge_status");
    ///<summary>ENVY Full Charge Lifetime</summary>
    public SensorEntity EnvyBatteryFullChargeLifetime => new(_haContext, "sensor.envy_battery_full_charge_lifetime");
    ///<summary>ENVY Powerline Status</summary>
    public SensorEntity EnvyBatteryPowerlineStatus => new(_haContext, "sensor.envy_battery_powerline_status");
    ///<summary>ENVY bluetoothdevices</summary>
    public SensorEntity EnvyBluetoothdevices => new(_haContext, "sensor.envy_bluetoothdevices");
    ///<summary>ENVY Display Count</summary>
    public SensorEntity EnvyDisplayDisplayCount => new(_haContext, "sensor.envy_display_display_count");
    ///<summary>ENVY Primary Display</summary>
    public SensorEntity EnvyDisplayPrimaryDisplay => new(_haContext, "sensor.envy_display_primary_display");
    ///<summary>ENVY lastactive</summary>
    public SensorEntity EnvyLastactive => new(_haContext, "sensor.envy_lastactive");
    ///<summary>ENVY Ethernet 3</summary>
    public SensorEntity EnvyNetworkEaaf8fc14e9943c1a3be497772840b6b => new(_haContext, "sensor.envy_network_eaaf8fc14e9943c1a3be497772840b6b");
    ///<summary>ENVY Network Card Count</summary>
    public SensorEntity EnvyNetworkTotalNetworkCardCount => new(_haContext, "sensor.envy_network_total_network_card_count");
    ///<summary>Estimated Sleep Time</summary>
    public SensorEntity EstimatedSleepTime => new(_haContext, "sensor.estimated_sleep_time");
    ///<summary>FRITZ!Box 6660 Cable Connection uptime</summary>
    public SensorEntity FritzBox6660CableConnectionUptime => new(_haContext, "sensor.fritz_box_6660_cable_connection_uptime");
    ///<summary>FRITZ!Box 6660 Cable External IP</summary>
    public SensorEntity FritzBox6660CableExternalIp => new(_haContext, "sensor.fritz_box_6660_cable_external_ip");
    ///<summary>FRITZ!Box 6660 Cable External IPv6</summary>
    public SensorEntity FritzBox6660CableExternalIpv6 => new(_haContext, "sensor.fritz_box_6660_cable_external_ipv6");
    ///<summary>FRITZ!Box 6660 Cable Last restart</summary>
    public SensorEntity FritzBox6660CableLastRestart => new(_haContext, "sensor.fritz_box_6660_cable_last_restart");
    ///<summary>Hue Switch Runner Action</summary>
    public SensorEntity HueSwitchRunnerAction => new(_haContext, "sensor.hue_switch_runner_action");
    ///<summary>Inkplate battery</summary>
    public SensorEntity InkplateBattery => new(_haContext, "sensor.inkplate_battery");
    ///<summary>Inkplate date</summary>
    public SensorEntity InkplateDate => new(_haContext, "sensor.inkplate_date");
    ///<summary>InternetGatewayDeviceV2 - FRITZ!Box 6660 Cable External IP</summary>
    public SensorEntity Internetgatewaydevicev2FritzBox6660CableExternalIp => new(_haContext, "sensor.internetgatewaydevicev2_fritz_box_6660_cable_external_ip");
    ///<summary>Keychain Action</summary>
    public SensorEntity KeychainAction => new(_haContext, "sensor.keychain_action");
    ///<summary>Kitchen Sensors</summary>
    public SensorEntity KitchenSensors => new(_haContext, "sensor.kitchen_sensors");
    ///<summary>Knob Bed Action</summary>
    public SensorEntity KnobBedAction => new(_haContext, "sensor.knob_bed_action");
    ///<summary>Knob Bed Delta</summary>
    public SensorEntity KnobBedDelta => new(_haContext, "sensor.knob_bed_delta");
    ///<summary>Knob Couch Action</summary>
    public SensorEntity KnobCouchAction => new(_haContext, "sensor.knob_couch_action");
    ///<summary>Knob Couch Action rate</summary>
    public SensorEntity KnobCouchActionRate => new(_haContext, "sensor.knob_couch_action_rate");
    ///<summary>Knob Couch Action step size</summary>
    public SensorEntity KnobCouchActionStepSize => new(_haContext, "sensor.knob_couch_action_step_size");
    ///<summary>Knob Couch Delta</summary>
    public SensorEntity KnobCouchDelta => new(_haContext, "sensor.knob_couch_delta");
    ///<summary>Knob Desktop Action</summary>
    public SensorEntity KnobDesktopAction => new(_haContext, "sensor.knob_desktop_action");
    ///<summary>Knob Desktop Action rate</summary>
    public SensorEntity KnobDesktopActionRate => new(_haContext, "sensor.knob_desktop_action_rate");
    ///<summary>Knob Desktop Action step size</summary>
    public SensorEntity KnobDesktopActionStepSize => new(_haContext, "sensor.knob_desktop_action_step_size");
    ///<summary>Knob Desktop Delta</summary>
    public SensorEntity KnobDesktopDelta => new(_haContext, "sensor.knob_desktop_delta");
    ///<summary>Lidl</summary>
    public SensorEntity Lidl => new(_haContext, "sensor.lidl");
    ///<summary>LivingRoomFP1 Power outage count</summary>
    public SensorEntity Livingroomfp1PowerOutageCount => new(_haContext, "sensor.livingroomfp1_power_outage_count");
    ///<summary>LivingRoomFP1 Presence event</summary>
    public SensorEntity Livingroomfp1PresenceEvent => new(_haContext, "sensor.livingroomfp1_presence_event");
    ///<summary>LrTabBedAction</summary>
    public SensorEntity Lrtabbedaction => new(_haContext, "sensor.lrtabbedaction");
    ///<summary>LrTabDesktopAction</summary>
    public SensorEntity Lrtabdesktopaction => new(_haContext, "sensor.lrtabdesktopaction");
    ///<summary>Node</summary>
    public SensorEntity LxcJellyfin101Node => new(_haContext, "sensor.lxc_jellyfin_101_node");
    ///<summary>Last boot</summary>
    public SensorEntity LxcJellyfin101Uptime => new(_haContext, "sensor.lxc_jellyfin_101_uptime");
    ///<summary>moto g(8) power lite Battery state</summary>
    public SensorEntity MotoG8PowerLiteBatteryState => new(_haContext, "sensor.moto_g_8_power_lite_battery_state");
    ///<summary>moto g(8) power lite Charger type</summary>
    public SensorEntity MotoG8PowerLiteChargerType => new(_haContext, "sensor.moto_g_8_power_lite_charger_type");
    ///<summary>moto g(8) power lite Last notification</summary>
    public SensorEntity MotoG8PowerLiteLastNotification => new(_haContext, "sensor.moto_g_8_power_lite_last_notification");
    ///<summary>moto g(8) power lite Media session</summary>
    public SensorEntity MotoG8PowerLiteMediaSession => new(_haContext, "sensor.moto_g_8_power_lite_media_session");
    ///<summary>Node pve Containers running</summary>
    public SensorEntity NodePveContainersRunning => new(_haContext, "sensor.node_pve_containers_running");
    ///<summary>Node pve Total updates</summary>
    public SensorEntity NodePveTotalUpdates => new(_haContext, "sensor.node_pve_total_updates");
    ///<summary>Node pve Last boot</summary>
    public SensorEntity NodePveUptime => new(_haContext, "sensor.node_pve_uptime");
    ///<summary>Node pve Virtual machines running</summary>
    public SensorEntity NodePveVirtualMachinesRunning => new(_haContext, "sensor.node_pve_virtual_machines_running");
    ///<summary>Nordpool Tomorrow Valid</summary>
    public SensorEntity NordpoolTomorrowValid => new(_haContext, "sensor.nordpool_tomorrow_valid");
    ///<summary>Outdoors Brightness Sensor</summary>
    public SensorEntity OutdoorsBrightnessSensor => new(_haContext, "sensor.outdoors_brightness_sensor");
    ///<summary>PC Default Device</summary>
    public SensorEntity PcAudioDefaultDevice => new(_haContext, "sensor.pc_audio_default_device");
    ///<summary>PC Default Device Muted</summary>
    public SensorEntity PcAudioDefaultDeviceMuted => new(_haContext, "sensor.pc_audio_default_device_muted");
    ///<summary>PC Default Device State</summary>
    public SensorEntity PcAudioDefaultDeviceState => new(_haContext, "sensor.pc_audio_default_device_state");
    ///<summary>PC Default Device Volume</summary>
    public SensorEntity PcAudioDefaultDeviceVolume => new(_haContext, "sensor.pc_audio_default_device_volume");
    ///<summary>PC Default Input Device</summary>
    public SensorEntity PcAudioDefaultInputDevice => new(_haContext, "sensor.pc_audio_default_input_device");
    ///<summary>PC Default Input Device Muted</summary>
    public SensorEntity PcAudioDefaultInputDeviceMuted => new(_haContext, "sensor.pc_audio_default_input_device_muted");
    ///<summary>PC Default Input Device State</summary>
    public SensorEntity PcAudioDefaultInputDeviceState => new(_haContext, "sensor.pc_audio_default_input_device_state");
    ///<summary>PC Default Input Device Volume</summary>
    public SensorEntity PcAudioDefaultInputDeviceVolume => new(_haContext, "sensor.pc_audio_default_input_device_volume");
    ///<summary>PC Audio Input Devices</summary>
    public SensorEntity PcAudioInputDevices => new(_haContext, "sensor.pc_audio_input_devices");
    ///<summary>PC Audio Output Devices</summary>
    public SensorEntity PcAudioOutputDevices => new(_haContext, "sensor.pc_audio_output_devices");
    ///<summary>PC Peak Volume</summary>
    public SensorEntity PcAudioPeakVolume => new(_haContext, "sensor.pc_audio_peak_volume");
    ///<summary>PC Audio Sessions</summary>
    public SensorEntity PcAudioSessions => new(_haContext, "sensor.pc_audio_sessions");
    ///<summary>PC DISPLAY1</summary>
    public SensorEntity PcC2ce45413a854b03Aacc016f116bc0fdDisplay1 => new(_haContext, "sensor.pc_c2ce4541_3a85_4b03_aacc_016f116bc0fd_display1");
    ///<summary>PC DISPLAY2</summary>
    public SensorEntity PcC2ce45413a854b03Aacc016f116bc0fdDisplay2 => new(_haContext, "sensor.pc_c2ce4541_3a85_4b03_aacc_016f116bc0fd_display2");
    ///<summary>PC DISPLAY3</summary>
    public SensorEntity PcC2ce45413a854b03Aacc016f116bc0fdDisplay3 => new(_haContext, "sensor.pc_c2ce4541_3a85_4b03_aacc_016f116bc0fd_display3");
    ///<summary>PC Display Count</summary>
    public SensorEntity PcDisplayDisplayCount => new(_haContext, "sensor.pc_display_display_count");
    ///<summary>PC Primary Display</summary>
    public SensorEntity PcDisplayPrimaryDisplay => new(_haContext, "sensor.pc_display_primary_display");
    ///<summary>PC PC_lastactive</summary>
    public SensorEntity PcLastactive => new(_haContext, "sensor.pc_lastactive");
    ///<summary>walkingpad_active</summary>
    public SensorEntity PcWalkingpadActive => new(_haContext, "sensor.pc_walkingpad_active");
    ///<summary>PC walkingpad_active</summary>
    public SensorEntity PcWalkingpadActive2 => new(_haContext, "sensor.pc_walkingpad_active_2");
    ///<summary>Preferred Mediaplayer</summary>
    public SensorEntity PreferredMediaplayer => new(_haContext, "sensor.preferred_mediaplayer");
    ///<summary>Prisma</summary>
    public SensorEntity Prisma => new(_haContext, "sensor.prisma");
    ///<summary>QEMU haos14.0 (100) Node</summary>
    public SensorEntity QemuHaos95100Node => new(_haContext, "sensor.qemu_haos9_5_100_node");
    ///<summary>QEMU haos14.0 (100) Status</summary>
    public SensorEntity QemuHaos95100Status => new(_haContext, "sensor.qemu_haos9_5_100_status");
    ///<summary>QEMU haos14.0 (100) Last boot</summary>
    public SensorEntity QemuHaos95100Uptime => new(_haContext, "sensor.qemu_haos9_5_100_uptime");
    ///<summary>Runner Steps</summary>
    public SensorEntity Runnersteps => new(_haContext, "sensor.runnersteps");
    ///<summary>S-Market</summary>
    public SensorEntity SMarket => new(_haContext, "sensor.s_market");
    ///<summary>SM-T530 Media Session</summary>
    public SensorEntity SmT530MediaSession => new(_haContext, "sensor.sm_t530_media_session");
    ///<summary>Starkvind Air quality</summary>
    public SensorEntity StarkvindAirQuality => new(_haContext, "sensor.starkvind_air_quality");
    ///<summary>Starkvind Fan speed</summary>
    public SensorEntity StarkvindFanSpeed => new(_haContext, "sensor.starkvind_fan_speed");
    ///<summary>Steps Todays K</summary>
    public SensorEntity StepsTodaysK => new(_haContext, "sensor.steps_todays_k");
    ///<summary>Lux Sensor Power outage count</summary>
    public SensorEntity StorageSensorAqaraPowerOutageCount => new(_haContext, "sensor.storage_sensor_aqara_power_outage_count");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Surface_Laptop Surface_Laptop_battery Charge Remaining</summary>
    public SensorEntity SurfaceLaptopBatteryChargeRemaining => new(_haContext, "sensor.surface_laptop_battery_charge_remaining");
    ///<summary>Surface_Laptop Surface_Laptop_battery Charge Status</summary>
    public SensorEntity SurfaceLaptopBatteryChargeStatus => new(_haContext, "sensor.surface_laptop_battery_charge_status");
    ///<summary>Surface_Laptop Surface_Laptop_battery Full Charge Lifetime</summary>
    public SensorEntity SurfaceLaptopBatteryFullChargeLifetime => new(_haContext, "sensor.surface_laptop_battery_full_charge_lifetime");
    ///<summary>Surface_Laptop Surface_Laptop_battery Powerline Status</summary>
    public SensorEntity SurfaceLaptopBatteryPowerlineStatus => new(_haContext, "sensor.surface_laptop_battery_powerline_status");
    ///<summary>Surface_Laptop Surface Laptop_lastactive</summary>
    public SensorEntity SurfaceLaptopLastactive => new(_haContext, "sensor.surface_laptop_lastactive");
    ///<summary>System Monitor Last boot</summary>
    public SensorEntity SystemMonitorLastBoot => new(_haContext, "sensor.system_monitor_last_boot");
    ///<summary>True Fridge Temperature</summary>
    public SensorEntity TrueFridgeTemperature => new(_haContext, "sensor.true_fridge_temperature");
    ///<summary>Uptime</summary>
    public SensorEntity Uptime => new(_haContext, "sensor.uptime");
    ///<summary>Withings Last workout intensity</summary>
    public SensorEntity WithingsLastWorkoutIntensity => new(_haContext, "sensor.withings_last_workout_intensity");
    ///<summary>Withings Last workout type</summary>
    public SensorEntity WithingsLastWorkoutType => new(_haContext, "sensor.withings_last_workout_type");
    ///<summary>Zigbee2MQTT Bridge Version</summary>
    public SensorEntity Zigbee2mqttBridgeVersion => new(_haContext, "sensor.zigbee2mqtt_bridge_version");
    ///<summary>PC Sensor Battery</summary>
    public NumericSensorEntity _0x001788010bcfb16fBattery => new(_haContext, "sensor.0x001788010bcfb16f_battery");
    ///<summary>PC Sensor Temperature</summary>
    public NumericSensorEntity _0x001788010bcfb16fTemperature => new(_haContext, "sensor.0x001788010bcfb16f_temperature");
    ///<summary>AdGuard Home Average processing speed</summary>
    public NumericSensorEntity AdguardHomeAverageProcessingSpeed => new(_haContext, "sensor.adguard_home_average_processing_speed");
    ///<summary>AdGuard Home DNS queries</summary>
    public NumericSensorEntity AdguardHomeDnsQueries => new(_haContext, "sensor.adguard_home_dns_queries");
    ///<summary>AdGuard Home DNS queries blocked</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlocked => new(_haContext, "sensor.adguard_home_dns_queries_blocked");
    ///<summary>AdGuard Home DNS queries blocked ratio</summary>
    public NumericSensorEntity AdguardHomeDnsQueriesBlockedRatio => new(_haContext, "sensor.adguard_home_dns_queries_blocked_ratio");
    ///<summary>AdGuard Home Parental control blocked</summary>
    public NumericSensorEntity AdguardHomeParentalControlBlocked => new(_haContext, "sensor.adguard_home_parental_control_blocked");
    ///<summary>AdGuard Home Safe browsing blocked</summary>
    public NumericSensorEntity AdguardHomeSafeBrowsingBlocked => new(_haContext, "sensor.adguard_home_safe_browsing_blocked");
    ///<summary>AdGuard Home Safe searches enforced</summary>
    public NumericSensorEntity AdguardHomeSafeSearchesEnforced => new(_haContext, "sensor.adguard_home_safe_searches_enforced");
    ///<summary>All Lights Daily Conpumption</summary>
    public NumericSensorEntity AllLightDailyConsumption => new(_haContext, "sensor.all_light_daily_consumption");
    ///<summary>All Powers energy</summary>
    public NumericSensorEntity AllPowersEnergy => new(_haContext, "sensor.all_powers_energy");
    ///<summary>All Powers energy daily</summary>
    public NumericSensorEntity AllPowersEnergyDaily => new(_haContext, "sensor.all_powers_energy_daily");
    ///<summary>All Powers energy hourly</summary>
    public NumericSensorEntity AllPowersEnergyHourly => new(_haContext, "sensor.all_powers_energy_hourly");
    ///<summary>All Powers power</summary>
    public NumericSensorEntity AllPowersPower => new(_haContext, "sensor.all_powers_power");
    ///<summary>All standby power</summary>
    public NumericSensorEntity AllStandbyPower => new(_haContext, "sensor.all_standby_power");
    ///<summary>Away from home today</summary>
    public NumericSensorEntity AwayFromHomeToday => new(_haContext, "sensor.away_from_home_today");
    ///<summary>Bed Knob Action transition time</summary>
    public NumericSensorEntity BedKnobActionTransitionTime => new(_haContext, "sensor.bed_knob_action_transition_time");
    ///<summary>Bed Knob Battery</summary>
    public NumericSensorEntity BedKnobBattery => new(_haContext, "sensor.bed_knob_battery");
    ///<summary>Bed Light energy</summary>
    public NumericSensorEntity BedLightEnergy => new(_haContext, "sensor.bed_light_energy");
    ///<summary>Bed Light power</summary>
    public NumericSensorEntity BedLightPower => new(_haContext, "sensor.bed_light_power");
    ///<summary>BigFridge-Powermeter Energy</summary>
    public NumericSensorEntity BigfridgePowermeterEnergy => new(_haContext, "sensor.bigfridge_powermeter_energy");
    ///<summary>BigFridge-Powermeter Power</summary>
    public NumericSensorEntity BigfridgePowermeterPower => new(_haContext, "sensor.bigfridge_powermeter_power");
    ///<summary>Cube Action angle</summary>
    public NumericSensorEntity CubeActionAngle => new(_haContext, "sensor.cube_action_angle");
    ///<summary>Cube Battery</summary>
    public NumericSensorEntity CubeBattery => new(_haContext, "sensor.cube_battery");
    ///<summary>Cube Temperature</summary>
    public NumericSensorEntity CubeDeviceTemperature => new(_haContext, "sensor.cube_device_temperature");
    ///<summary>Daily Energy Cost</summary>
    public NumericSensorEntity DailyEnergyCost => new(_haContext, "sensor.daily_energy_cost");
    ///<summary>Daily Energy Savings</summary>
    public NumericSensorEntity DailyEnergySavings => new(_haContext, "sensor.daily_energy_savings");
    ///<summary>Daily Savings 24h</summary>
    public NumericSensorEntity DailySavings24h => new(_haContext, "sensor.daily_savings_24h");
    ///<summary>Desktop Height</summary>
    public NumericSensorEntity DesktopHeight => new(_haContext, "sensor.desktop_height");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Airflow temperature</summary>
    public NumericSensorEntity DiskPveDevSdaAirflowTemperature => new(_haContext, "sensor.disk_pve_dev_sda_airflow_temperature");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Power-on hours</summary>
    public NumericSensorEntity DiskPveDevSdaPowerOnHours => new(_haContext, "sensor.disk_pve_dev_sda_power_on_hours");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Size</summary>
    public NumericSensorEntity DiskPveDevSdaSize => new(_haContext, "sensor.disk_pve_dev_sda_size");
    ///<summary>Disk pve: One Touch HDD (/dev/sdb) Size</summary>
    public NumericSensorEntity DiskPveOneTouchHddDevSdbSize => new(_haContext, "sensor.disk_pve_one_touch_hdd_dev_sdb_size");
    ///<summary>Disk pve: SAMSUNG MZ7LN128HCHP-000H1 (/dev/sda) Wearout</summary>
    public NumericSensorEntity DiskPveSamsungMz7ln128hchp000h1DevSdaWearout => new(_haContext, "sensor.disk_pve_samsung_mz7ln128hchp_000h1_dev_sda_wearout");
    ///<summary>Airflow temperature</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdbAirflowTemperature => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdb_airflow_temperature");
    ///<summary>Power-on hours</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdbPowerOnHours => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdb_power_on_hours");
    ///<summary>Temperature</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdbTemperature => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdb_temperature");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Airflow temperature</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdcAirflowTemperature => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_airflow_temperature");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Power-on hours</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdcPowerOnHours => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_power_on_hours");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Size</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdcSize => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_size");
    ///<summary>Disk pve: ST4000DM000-1F2168 (/dev/sdc) Temperature</summary>
    public NumericSensorEntity DiskPveSt6000ne0002kr101DevSdcTemperature => new(_haContext, "sensor.disk_pve_st6000ne000_2kr101_dev_sdc_temperature");
    ///<summary>Wearout</summary>
    public NumericSensorEntity DiskPveWdcWds200t1r0a68a4w0DevSdcWearout => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdc_wearout");
    ///<summary>Power-on hours</summary>
    public NumericSensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddPowerOnHours => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_power_on_hours");
    ///<summary>Size</summary>
    public NumericSensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddSize => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_size");
    ///<summary>Temperature</summary>
    public NumericSensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddTemperature => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_temperature");
    ///<summary>Wearout</summary>
    public NumericSensorEntity DiskPveWdcWds200t1r0a68a4w0DevSddWearout => new(_haContext, "sensor.disk_pve_wdc_wds200t1r0a_68a4w0_dev_sdd_wearout");
    ///<summary>Ecoflow AC In Power</summary>
    public NumericSensorEntity EcoflowAcInPower => new(_haContext, "sensor.ecoflow_ac_in_power");
    ///<summary>Ecoflow AC In Volts</summary>
    public NumericSensorEntity EcoflowAcInVolts => new(_haContext, "sensor.ecoflow_ac_in_volts");
    ///<summary>Ecoflow Ac Input Daily</summary>
    public NumericSensorEntity EcoflowAcInputDaily => new(_haContext, "sensor.ecoflow_ac_input_daily");
    ///<summary>Ecoflow AC Input Fixed</summary>
    public NumericSensorEntity EcoflowAcInputFixed => new(_haContext, "sensor.ecoflow_ac_input_fixed");
    ///<summary>Ecoflow Ac Input Hourly</summary>
    public NumericSensorEntity EcoflowAcInputHourly => new(_haContext, "sensor.ecoflow_ac_input_hourly");
    ///<summary>Ecoflow AC Input Sum</summary>
    public NumericSensorEntity EcoflowAcInputSum => new(_haContext, "sensor.ecoflow_ac_input_sum");
    ///<summary>Ecoflow AC Out Power</summary>
    public NumericSensorEntity EcoflowAcOutPower => new(_haContext, "sensor.ecoflow_ac_out_power");
    ///<summary>Ecoflow AC Out Volts</summary>
    public NumericSensorEntity EcoflowAcOutVolts => new(_haContext, "sensor.ecoflow_ac_out_volts");
    ///<summary>Ecoflow Ac Output daily</summary>
    public NumericSensorEntity EcoflowAcOutputDaily => new(_haContext, "sensor.ecoflow_ac_output_daily");
    ///<summary>Ecoflow AC Output Fixed</summary>
    public NumericSensorEntity EcoflowAcOutputFixed => new(_haContext, "sensor.ecoflow_ac_output_fixed");
    ///<summary>Ecoflow AC Output Hourly</summary>
    public NumericSensorEntity EcoflowAcOutputHourly => new(_haContext, "sensor.ecoflow_ac_output_hourly");
    ///<summary>Ecoflow AC Output Sum</summary>
    public NumericSensorEntity EcoflowAcOutputSum => new(_haContext, "sensor.ecoflow_ac_output_sum");
    ///<summary>Ecoflow Battery Level</summary>
    public NumericSensorEntity EcoflowBatteryLevel => new(_haContext, "sensor.ecoflow_battery_level");
    ///<summary>Ecoflow Battery Temperature</summary>
    public NumericSensorEntity EcoflowBatteryTemperature => new(_haContext, "sensor.ecoflow_battery_temperature");
    ///<summary>Ecoflow Charge Remaining Time</summary>
    public NumericSensorEntity EcoflowChargeRemainingTime => new(_haContext, "sensor.ecoflow_charge_remaining_time");
    ///<summary>Ecoflow DC Out Power</summary>
    public NumericSensorEntity EcoflowDcOutPower => new(_haContext, "sensor.ecoflow_dc_out_power");
    ///<summary>Ecoflow Discharge Remaining Time</summary>
    public NumericSensorEntity EcoflowDischargeRemainingTime => new(_haContext, "sensor.ecoflow_discharge_remaining_time");
    ///<summary>Ecoflow Inv Out Temperature</summary>
    public NumericSensorEntity EcoflowInvOutTemperature => new(_haContext, "sensor.ecoflow_inv_out_temperature");
    ///<summary>Ecoflow Main Battery Level</summary>
    public NumericSensorEntity EcoflowMainBatteryLevel => new(_haContext, "sensor.ecoflow_main_battery_level");
    ///<summary>Ecoflow Slave State of Health</summary>
    public NumericSensorEntity EcoflowSlaveStateOfHealth => new(_haContext, "sensor.ecoflow_slave_state_of_health");
    ///<summary>Ecoflow Solar In Power</summary>
    public NumericSensorEntity EcoflowSolarInPower => new(_haContext, "sensor.ecoflow_solar_in_power");
    ///<summary>Ecoflow Solar Input Fixed</summary>
    public NumericSensorEntity EcoflowSolarInputFixed => new(_haContext, "sensor.ecoflow_solar_input_fixed");
    ///<summary>Ecoflow Solar Input Hourly</summary>
    public NumericSensorEntity EcoflowSolarInputHourly => new(_haContext, "sensor.ecoflow_solar_input_hourly");
    ///<summary>Ecoflow Solar Input Sum</summary>
    public NumericSensorEntity EcoflowSolarInputSum => new(_haContext, "sensor.ecoflow_solar_input_sum");
    ///<summary>Ecoflow Solar Sum Daily</summary>
    public NumericSensorEntity EcoflowSolarSumDaily => new(_haContext, "sensor.ecoflow_solar_sum_daily");
    ///<summary>Ecoflow State of Health</summary>
    public NumericSensorEntity EcoflowStateOfHealth => new(_haContext, "sensor.ecoflow_state_of_health");
    ///<summary>Ecoflow Total In Power</summary>
    public NumericSensorEntity EcoflowTotalInPower => new(_haContext, "sensor.ecoflow_total_in_power");
    ///<summary>Ecoflow Total Out Power</summary>
    public NumericSensorEntity EcoflowTotalOutPower => new(_haContext, "sensor.ecoflow_total_out_power");
    ///<summary>Ecoflow Type-C (1) Out Power</summary>
    public NumericSensorEntity EcoflowTypeC1OutPower => new(_haContext, "sensor.ecoflow_type_c_1_out_power");
    ///<summary>Ecoflow Type-C (2) Out Power</summary>
    public NumericSensorEntity EcoflowTypeC2OutPower => new(_haContext, "sensor.ecoflow_type_c_2_out_power");
    ///<summary>Ecoflow USB (1) Out Power</summary>
    public NumericSensorEntity EcoflowUsb1OutPower => new(_haContext, "sensor.ecoflow_usb_1_out_power");
    ///<summary>Ecoflow USB (2) Out Power</summary>
    public NumericSensorEntity EcoflowUsb2OutPower => new(_haContext, "sensor.ecoflow_usb_2_out_power");
    ///<summary>Ecoflow USB QC (1) Out Power</summary>
    public NumericSensorEntity EcoflowUsbQc1OutPower => new(_haContext, "sensor.ecoflow_usb_qc_1_out_power");
    ///<summary>Ecoflow USB QC (2) Out Power</summary>
    public NumericSensorEntity EcoflowUsbQc2OutPower => new(_haContext, "sensor.ecoflow_usb_qc_2_out_power");
    ///<summary>Energy Cost Rounded</summary>
    public NumericSensorEntity EnergyCostRounded => new(_haContext, "sensor.energy_cost_rounded");
    ///<summary>ENVY Charge Remaining Percentage</summary>
    public NumericSensorEntity EnvyBatteryChargeRemainingPercentage => new(_haContext, "sensor.envy_battery_charge_remaining_percentage");
    ///<summary>Fridge Contact Sensor Battery</summary>
    public NumericSensorEntity FridgeContactSensorBattery => new(_haContext, "sensor.fridge_contact_sensor_battery");
    ///<summary>FRITZ!Box 6660 Cable Download throughput</summary>
    public NumericSensorEntity FritzBox6660CableDownloadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_download_throughput");
    ///<summary>FRITZ!Box 6660 Cable GB received</summary>
    public NumericSensorEntity FritzBox6660CableGbReceived => new(_haContext, "sensor.fritz_box_6660_cable_gb_received");
    ///<summary>FRITZ!Box 6660 Cable GB sent</summary>
    public NumericSensorEntity FritzBox6660CableGbSent => new(_haContext, "sensor.fritz_box_6660_cable_gb_sent");
    ///<summary>FRITZ!Box 6660 Cable Link download throughput</summary>
    public NumericSensorEntity FritzBox6660CableLinkDownloadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_link_download_throughput");
    ///<summary>FRITZ!Box 6660 Cable Link upload throughput</summary>
    public NumericSensorEntity FritzBox6660CableLinkUploadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_link_upload_throughput");
    ///<summary>FRITZ!Box 6660 Cable Max connection download throughput</summary>
    public NumericSensorEntity FritzBox6660CableMaxConnectionDownloadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_max_connection_download_throughput");
    ///<summary>FRITZ!Box 6660 Cable Max connection upload throughput</summary>
    public NumericSensorEntity FritzBox6660CableMaxConnectionUploadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_max_connection_upload_throughput");
    ///<summary>FRITZ!Box 6660 Cable Upload throughput</summary>
    public NumericSensorEntity FritzBox6660CableUploadThroughput => new(_haContext, "sensor.fritz_box_6660_cable_upload_throughput");
    ///<summary>Hallway Light energy</summary>
    public NumericSensorEntity HallwayLightEnergy2 => new(_haContext, "sensor.hallway_light_energy_2");
    ///<summary>Hallway Light power</summary>
    public NumericSensorEntity HallwayLightPower2 => new(_haContext, "sensor.hallway_light_power_2");
    ///<summary>Hallway Sensor Battery</summary>
    public NumericSensorEntity HallwaySensorBattery2 => new(_haContext, "sensor.hallway_sensor_battery_2");
    ///<summary>Hallway Sensor Temperature</summary>
    public NumericSensorEntity HallwaySensorTemperature2 => new(_haContext, "sensor.hallway_sensor_temperature_2");
    ///<summary>Hue Switch Bed Battery</summary>
    public NumericSensorEntity HueSwitchBedBattery => new(_haContext, "sensor.hue_switch_bed_battery");
    ///<summary>Hue Switch Living Room Battery</summary>
    public NumericSensorEntity HueSwitchLivingRoomBattery => new(_haContext, "sensor.hue_switch_living_room_battery");
    ///<summary>Indoor Humidity Delta</summary>
    public NumericSensorEntity IndoorHumidityDelta => new(_haContext, "sensor.indoor_humidity_delta");
    ///<summary>Indoors Info</summary>
    public NumericSensorEntity IndoorsInfo => new(_haContext, "sensor.indoors_info");
    ///<summary>Inkplate-plug Energy</summary>
    public NumericSensorEntity InkplatePlugEnergy => new(_haContext, "sensor.inkplate_plug_energy");
    ///<summary>Inkplate-plug Power</summary>
    public NumericSensorEntity InkplatePlugPower => new(_haContext, "sensor.inkplate_plug_power");
    ///<summary>InternetGatewayDeviceV2 - FRITZ!Box 6660 Cable Download speed</summary>
    public NumericSensorEntity Internetgatewaydevicev2FritzBox6660CableKibSReceived => new(_haContext, "sensor.internetgatewaydevicev2_fritz_box_6660_cable_kib_s_received");
    ///<summary>InternetGatewayDeviceV2 - FRITZ!Box 6660 Cable Upload speed</summary>
    public NumericSensorEntity Internetgatewaydevicev2FritzBox6660CableKibSSent => new(_haContext, "sensor.internetgatewaydevicev2_fritz_box_6660_cable_kib_s_sent");
    ///<summary>Keychain Battery</summary>
    public NumericSensorEntity KeychainBattery => new(_haContext, "sensor.keychain_battery");
    ///<summary>Kitchen Light energy</summary>
    public NumericSensorEntity KitchenLightEnergy2 => new(_haContext, "sensor.kitchen_light_energy_2");
    ///<summary>Kitchen Light power</summary>
    public NumericSensorEntity KitchenLightPower2 => new(_haContext, "sensor.kitchen_light_power_2");
    ///<summary>Kitchen Power Consumption</summary>
    public NumericSensorEntity KitchenPowerConsumption => new(_haContext, "sensor.kitchen_power_consumption");
    ///<summary>Kitchen PowerMeter-Plug Energy</summary>
    public NumericSensorEntity KitchenPowermeterPlugEnergy => new(_haContext, "sensor.kitchen_powermeter_plug_energy");
    ///<summary>Kitchen PowerMeter-Plug Power</summary>
    public NumericSensorEntity KitchenPowermeterPlugPower => new(_haContext, "sensor.kitchen_powermeter_plug_power");
    ///<summary>Kitchen Sensor Battery</summary>
    public NumericSensorEntity KitchenSensorBattery2 => new(_haContext, "sensor.kitchen_sensor_battery_2");
    ///<summary>Kitchen Sensor Temperature</summary>
    public NumericSensorEntity KitchenSensorTemperature2 => new(_haContext, "sensor.kitchen_sensor_temperature_2");
    ///<summary>Knob Couch Action transition time</summary>
    public NumericSensorEntity KnobCouchActionTransitionTime => new(_haContext, "sensor.knob_couch_action_transition_time");
    ///<summary>Knob Couch Battery</summary>
    public NumericSensorEntity KnobCouchBattery => new(_haContext, "sensor.knob_couch_battery");
    ///<summary>Knob Desktop Action transition time</summary>
    public NumericSensorEntity KnobDesktopActionTransitionTime => new(_haContext, "sensor.knob_desktop_action_transition_time");
    ///<summary>Knob Desktop Battery</summary>
    public NumericSensorEntity KnobDesktopBattery => new(_haContext, "sensor.knob_desktop_battery");
    ///<summary>Living Room Light energy</summary>
    public NumericSensorEntity LivingRoomLightEnergy2 => new(_haContext, "sensor.living_room_light_energy_2");
    ///<summary>Living Room Light power</summary>
    public NumericSensorEntity LivingRoomLightPower2 => new(_haContext, "sensor.living_room_light_power_2");
    ///<summary>Livingroom Climatemeter Battery</summary>
    public NumericSensorEntity LivingroomClimatemeterBattery => new(_haContext, "sensor.livingroom_climatemeter_battery");
    ///<summary>Livingroom Climatemeter Humidity</summary>
    public NumericSensorEntity LivingroomClimatemeterHumidity => new(_haContext, "sensor.livingroom_climatemeter_humidity");
    ///<summary>Livingroom Climatemeter Temperature</summary>
    public NumericSensorEntity LivingroomClimatemeterTemperature => new(_haContext, "sensor.livingroom_climatemeter_temperature");
    ///<summary>Livingroom temp delta</summary>
    public NumericSensorEntity LivingroomTempDelta => new(_haContext, "sensor.livingroom_temp_delta");
    ///<summary>Livingroom Window Sensor Battery</summary>
    public NumericSensorEntity LivingroomWindowSensorBattery => new(_haContext, "sensor.livingroom_window_sensor_battery");
    ///<summary>Livingroom Window Sensor Temperature</summary>
    public NumericSensorEntity LivingroomWindowSensorDeviceTemperature => new(_haContext, "sensor.livingroom_window_sensor_device_temperature");
    ///<summary>LivingRoomFP1 Temperature</summary>
    public NumericSensorEntity Livingroomfp1DeviceTemperature => new(_haContext, "sensor.livingroomfp1_device_temperature");
    ///<summary>LR Tab Bed Battery</summary>
    public NumericSensorEntity LrTabBedBattery => new(_haContext, "sensor.lr_tab_bed_battery");
    ///<summary>LRtab PC Battery</summary>
    public NumericSensorEntity LrtabPcBattery => new(_haContext, "sensor.lrtab_pc_battery");
    ///<summary>CPU used</summary>
    public NumericSensorEntity LxcJellyfin101CpuUsed => new(_haContext, "sensor.lxc_jellyfin_101_cpu_used");
    ///<summary>Disk used percentage</summary>
    public NumericSensorEntity LxcJellyfin101DiskUsedPercentage => new(_haContext, "sensor.lxc_jellyfin_101_disk_used_percentage");
    ///<summary>Memory free</summary>
    public NumericSensorEntity LxcJellyfin101MemoryFree => new(_haContext, "sensor.lxc_jellyfin_101_memory_free");
    ///<summary>Memory used</summary>
    public NumericSensorEntity LxcJellyfin101MemoryUsed => new(_haContext, "sensor.lxc_jellyfin_101_memory_used");
    ///<summary>Memory used percentage</summary>
    public NumericSensorEntity LxcJellyfin101MemoryUsedPercentage => new(_haContext, "sensor.lxc_jellyfin_101_memory_used_percentage");
    ///<summary>Main Fridge Daily Consumption</summary>
    public NumericSensorEntity MainFridgeDailyConsumption => new(_haContext, "sensor.main_fridge_daily_consumption");
    ///<summary>Misc-Daily-Consumption</summary>
    public NumericSensorEntity MiscDailyConsumption => new(_haContext, "sensor.misc_daily_consumption");
    ///<summary>Misc-PowerMeter Energy</summary>
    public NumericSensorEntity MiscPowermeterEnergy => new(_haContext, "sensor.misc_powermeter_energy");
    ///<summary>Misc-PowerMeter Power</summary>
    public NumericSensorEntity MiscPowermeterPower => new(_haContext, "sensor.misc_powermeter_power");
    ///<summary>Modem and Proxmox PowerMeter Energy</summary>
    public NumericSensorEntity ModemAndProxmoxPowermeterEnergy => new(_haContext, "sensor.modem_and_proxmox_powermeter_energy");
    ///<summary>Modem and Proxmox PowerMeter Power</summary>
    public NumericSensorEntity ModemAndProxmoxPowermeterPower => new(_haContext, "sensor.modem_and_proxmox_powermeter_power");
    ///<summary>Modem Auto On Plug Energy</summary>
    public NumericSensorEntity ModemAutoOnPlugEnergy => new(_haContext, "sensor.modem_auto_on_plug_energy");
    ///<summary>Modem Auto On Plug Power</summary>
    public NumericSensorEntity ModemAutoOnPlugPower => new(_haContext, "sensor.modem_auto_on_plug_power");
    ///<summary>Modem and Proxmox Daily Energy</summary>
    public NumericSensorEntity ModemDailyEnergy => new(_haContext, "sensor.modem_daily_energy");
    ///<summary>Monitor Light energy</summary>
    public NumericSensorEntity MonitorLightEnergy => new(_haContext, "sensor.monitor_light_energy");
    ///<summary>Monitor Light power</summary>
    public NumericSensorEntity MonitorLightPower => new(_haContext, "sensor.monitor_light_power");
    ///<summary>moto g(8) power lite Battery level</summary>
    public NumericSensorEntity MotoG8PowerLiteBatteryLevel => new(_haContext, "sensor.moto_g_8_power_lite_battery_level");
    ///<summary>moto g(8) power lite Steps sensor</summary>
    public NumericSensorEntity MotoG8PowerLiteStepsSensor => new(_haContext, "sensor.moto_g_8_power_lite_steps_sensor");
    ///<summary>Next Energy Price Rounded</summary>
    public NumericSensorEntity NextEnergyPriceRounded => new(_haContext, "sensor.next_energy_price_rounded");
    ///<summary>Next Price</summary>
    public NumericSensorEntity NextPrice => new(_haContext, "sensor.next_price");
    ///<summary>Node pve CPU used</summary>
    public NumericSensorEntity NodePveCpuUsed => new(_haContext, "sensor.node_pve_cpu_used");
    ///<summary>Node pve Disk used percentage</summary>
    public NumericSensorEntity NodePveDiskUsedPercentage => new(_haContext, "sensor.node_pve_disk_used_percentage");
    ///<summary>Node pve Memory free</summary>
    public NumericSensorEntity NodePveMemoryFree => new(_haContext, "sensor.node_pve_memory_free");
    ///<summary>Node pve Memory used</summary>
    public NumericSensorEntity NodePveMemoryUsed => new(_haContext, "sensor.node_pve_memory_used");
    ///<summary>Node pve Memory used percentage</summary>
    public NumericSensorEntity NodePveMemoryUsedPercentage => new(_haContext, "sensor.node_pve_memory_used_percentage");
    ///<summary>nordpool_kwh_fi_eur_3_10_0255</summary>
    public NumericSensorEntity Nordpool => new(_haContext, "sensor.nordpool");
    ///<summary>Outdoors Brightness</summary>
    public NumericSensorEntity OutdoorsBrightness => new(_haContext, "sensor.outdoors_brightness");
    ///<summary>Outside Temp</summary>
    public NumericSensorEntity OutsideTemp => new(_haContext, "sensor.outside_temp");
    ///<summary>Pc_Accesories_Daily_Energy</summary>
    public NumericSensorEntity PcAccesoriesDailyEnergy => new(_haContext, "sensor.pc_accesories_daily_energy");
    ///<summary>PC Energy Consumption (Daily)</summary>
    public NumericSensorEntity PcEnergyConsumptionDaily => new(_haContext, "sensor.pc_energy_consumption_daily");
    ///<summary>Pc Energy Consumption (Hourly)</summary>
    public NumericSensorEntity PcEnergyConsumptionHourly => new(_haContext, "sensor.pc_energy_consumption_hourly");
    ///<summary>PC Energy Meters</summary>
    public NumericSensorEntity PcEnergyMeters => new(_haContext, "sensor.pc_energy_meters");
    ///<summary>PC PC_memoryusage</summary>
    public NumericSensorEntity PcMemoryusage => new(_haContext, "sensor.pc_memoryusage");
    ///<summary>PC-MultiPowerMeter Current</summary>
    public NumericSensorEntity PcMultipowermeterCurrent => new(_haContext, "sensor.pc_multipowermeter_current");
    ///<summary>PC-MultiPowerMeter Energy</summary>
    public NumericSensorEntity PcMultipowermeterEnergy => new(_haContext, "sensor.pc_multipowermeter_energy");
    ///<summary>PC-MultiPowerMeter Power</summary>
    public NumericSensorEntity PcMultipowermeterPower => new(_haContext, "sensor.pc_multipowermeter_power");
    ///<summary>Pc On today</summary>
    public NumericSensorEntity PcOnToday => new(_haContext, "sensor.pc_on_today");
    ///<summary>PC-Plug Energy</summary>
    public NumericSensorEntity PcPlugEnergy => new(_haContext, "sensor.pc_plug_energy");
    ///<summary>PC-Plug Power</summary>
    public NumericSensorEntity PcPlugPower => new(_haContext, "sensor.pc_plug_power");
    ///<summary>Power meter (hourly)</summary>
    public NumericSensorEntity PowerMeterHourly => new(_haContext, "sensor.power_meter_hourly");
    ///<summary>Power_Meters_Energy_Hourly</summary>
    public NumericSensorEntity PowerMetersEnergyHourly => new(_haContext, "sensor.power_meters_energy_hourly");
    ///<summary>QEMU haos14.0 (100) CPU used</summary>
    public NumericSensorEntity QemuHaos95100CpuUsed => new(_haContext, "sensor.qemu_haos9_5_100_cpu_used");
    ///<summary>QEMU haos14.0 (100) Disk used percentage</summary>
    public NumericSensorEntity QemuHaos95100DiskUsedPercentage => new(_haContext, "sensor.qemu_haos9_5_100_disk_used_percentage");
    ///<summary>QEMU haos14.0 (100) Memory free</summary>
    public NumericSensorEntity QemuHaos95100MemoryFree => new(_haContext, "sensor.qemu_haos9_5_100_memory_free");
    ///<summary>QEMU haos14.0 (100) Memory used</summary>
    public NumericSensorEntity QemuHaos95100MemoryUsed => new(_haContext, "sensor.qemu_haos9_5_100_memory_used");
    ///<summary>QEMU haos14.0 (100) Memory used percentage</summary>
    public NumericSensorEntity QemuHaos95100MemoryUsedPercentage => new(_haContext, "sensor.qemu_haos9_5_100_memory_used_percentage");
    ///<summary>SM-T530 Battery Level</summary>
    public NumericSensorEntity SmT530BatteryLevel => new(_haContext, "sensor.sm_t530_battery_level");
    ///<summary>Standing or Out Time</summary>
    public NumericSensorEntity StandingOrOutTime => new(_haContext, "sensor.standing_or_out_time");
    ///<summary>Standing Today</summary>
    public NumericSensorEntity StandingToday => new(_haContext, "sensor.standing_today");
    ///<summary>Standing Today</summary>
    public NumericSensorEntity StandingToday2 => new(_haContext, "sensor.standing_today_2");
    ///<summary>Standing Today</summary>
    public NumericSensorEntity StandingToday3 => new(_haContext, "sensor.standing_today_3");
    ///<summary>Starkvind Device age</summary>
    public NumericSensorEntity StarkvindDeviceAge => new(_haContext, "sensor.starkvind_device_age");
    ///<summary>Starkvind Filter age</summary>
    public NumericSensorEntity StarkvindFilterAge => new(_haContext, "sensor.starkvind_filter_age");
    ///<summary>Starkvind PM2.5</summary>
    public NumericSensorEntity StarkvindPm25 => new(_haContext, "sensor.starkvind_pm25");
    ///<summary>Steps Todays</summary>
    public NumericSensorEntity StepsTodays => new(_haContext, "sensor.steps_todays");
    ///<summary>Storage Light energy</summary>
    public NumericSensorEntity StorageLightEnergy2 => new(_haContext, "sensor.storage_light_energy_2");
    ///<summary>Storage Light power</summary>
    public NumericSensorEntity StorageLightPower2 => new(_haContext, "sensor.storage_light_power_2");
    ///<summary>Lux Sensor Battery</summary>
    public NumericSensorEntity StorageSensorAqaraBattery => new(_haContext, "sensor.storage_sensor_aqara_battery");
    ///<summary>Lux Sensor Temperature</summary>
    public NumericSensorEntity StorageSensorAqaraDeviceTemperature => new(_haContext, "sensor.storage_sensor_aqara_device_temperature");
    ///<summary>Storage Sensor Battery</summary>
    public NumericSensorEntity StorageSensorBattery => new(_haContext, "sensor.storage_sensor_battery");
    ///<summary>Sun Solar azimuth</summary>
    public NumericSensorEntity SunSolarAzimuth => new(_haContext, "sensor.sun_solar_azimuth");
    ///<summary>Sun Solar elevation</summary>
    public NumericSensorEntity SunSolarElevation => new(_haContext, "sensor.sun_solar_elevation");
    ///<summary>Surface_Laptop Surface_Laptop_battery Charge Remaining Percentage</summary>
    public NumericSensorEntity SurfaceLaptopBatteryChargeRemainingPercentage => new(_haContext, "sensor.surface_laptop_battery_charge_remaining_percentage");
    ///<summary>Switchbot Ecoflow Battery</summary>
    public NumericSensorEntity SwitchbotEcoflowBattery => new(_haContext, "sensor.switchbot_ecoflow_battery");
    ///<summary>TDB Consumption</summary>
    public NumericSensorEntity TbdConsumption => new(_haContext, "sensor.tbd_consumption");
    ///<summary>TBD-PowerMeter Energy</summary>
    public NumericSensorEntity TbdPowermeterEnergy => new(_haContext, "sensor.tbd_powermeter_energy");
    ///<summary>TBD-PowerMeter Power</summary>
    public NumericSensorEntity TbdPowermeterPower => new(_haContext, "sensor.tbd_powermeter_power");
    ///<summary>Toilet Energy Daily Consuption</summary>
    public NumericSensorEntity ToiletEnergyDailyConsumption => new(_haContext, "sensor.toilet_energy_daily_consumption");
    ///<summary>Toilet Light_1 energy</summary>
    public NumericSensorEntity ToiletLight1Energy2 => new(_haContext, "sensor.toilet_light_1_energy_2");
    ///<summary>Toilet Light_1 power</summary>
    public NumericSensorEntity ToiletLight1Power2 => new(_haContext, "sensor.toilet_light_1_power_2");
    ///<summary>Toilet Power Plug Energy</summary>
    public NumericSensorEntity ToiletPowerPlugEnergy => new(_haContext, "sensor.toilet_power_plug_energy");
    ///<summary>Toilet Power Plug Power</summary>
    public NumericSensorEntity ToiletPowerPlugPower => new(_haContext, "sensor.toilet_power_plug_power");
    ///<summary>Toilet Seat Sensor Battery</summary>
    public NumericSensorEntity ToiletSeatSensorBattery => new(_haContext, "sensor.toilet_seat_sensor_battery");
    ///<summary>Toilet Seat Sensor Temperature</summary>
    public NumericSensorEntity ToiletSeatSensorDeviceTemperature => new(_haContext, "sensor.toilet_seat_sensor_device_temperature");
    ///<summary>Toilet Sensor Battery</summary>
    public NumericSensorEntity ToiletSensorBattery2 => new(_haContext, "sensor.toilet_sensor_battery_2");
    ///<summary>Toilet Sensor Temperature</summary>
    public NumericSensorEntity ToiletSensorTemperature2 => new(_haContext, "sensor.toilet_sensor_temperature_2");
    ///<summary>Total Hourly Energy Consumptions</summary>
    public NumericSensorEntity TotalHourlyEnergyConsumptions => new(_haContext, "sensor.total_hourly_energy_consumptions");
    ///<summary>Total Hourly kwh</summary>
    public NumericSensorEntity TotalHourlyKwh => new(_haContext, "sensor.total_hourly_kwh");
    ///<summary>Total PC Energy Daily</summary>
    public NumericSensorEntity TotalPcEnergyDaily => new(_haContext, "sensor.total_pc_energy_daily");
    ///<summary>True Daily Energy Consumption</summary>
    public NumericSensorEntity TrueDailyEnergyConsumption => new(_haContext, "sensor.true_daily_energy_consumption");
    ///<summary>Tv Power Meter Daily</summary>
    public NumericSensorEntity TvPowerMeterDaily => new(_haContext, "sensor.tv_power_meter_daily");
    ///<summary>Tv Power Meter Energy</summary>
    public NumericSensorEntity TvPowerMeterEnergy => new(_haContext, "sensor.tv_power_meter_energy");
    ///<summary>Monitor Power Meter</summary>
    public NumericSensorEntity TvPowerMeterPower => new(_haContext, "sensor.tv_power_meter_power");
    ///<summary>Unt_Lights energy</summary>
    public NumericSensorEntity UntLightsEnergy => new(_haContext, "sensor.unt_lights_energy");
    ///<summary>Unt_Lights energy daily</summary>
    public NumericSensorEntity UntLightsEnergyDaily => new(_haContext, "sensor.unt_lights_energy_daily");
    ///<summary>Unt_Lights power</summary>
    public NumericSensorEntity UntLightsPower => new(_haContext, "sensor.unt_lights_power");
    ///<summary>Walkingpad Contact sensor Battery</summary>
    public NumericSensorEntity WalkingpadContactSensorBattery => new(_haContext, "sensor.walkingpad_contact_sensor_battery");
    ///<summary>Walkingpad Contact sensor Temperature</summary>
    public NumericSensorEntity WalkingpadContactSensorDeviceTemperature => new(_haContext, "sensor.walkingpad_contact_sensor_device_temperature");
    ///<summary>Withings Calories burnt last workout</summary>
    public NumericSensorEntity WithingsCaloriesBurntLastWorkout => new(_haContext, "sensor.withings_calories_burnt_last_workout");
    ///<summary>Withings Deep sleep</summary>
    public NumericSensorEntity WithingsDeepSleep => new(_haContext, "sensor.withings_deep_sleep");
    ///<summary>Withings Distance travelled last workout</summary>
    public NumericSensorEntity WithingsDistanceTravelledLastWorkout => new(_haContext, "sensor.withings_distance_travelled_last_workout");
    ///<summary>Withings Elevation change last workout</summary>
    public NumericSensorEntity WithingsElevationChangeLastWorkout => new(_haContext, "sensor.withings_elevation_change_last_workout");
    ///<summary>Withings Last workout duration</summary>
    public NumericSensorEntity WithingsLastWorkoutDuration => new(_haContext, "sensor.withings_last_workout_duration");
    ///<summary>Withings Pause during last workout</summary>
    public NumericSensorEntity WithingsPauseDuringLastWorkout => new(_haContext, "sensor.withings_pause_during_last_workout");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>PC Sensor Led indication</summary>
    public SwitchEntity _0x001788010bcfb16fLedIndication => new(_haContext, "switch.0x001788010bcfb16f_led_indication");
    ///<summary>Flashforge Internet Access</summary>
    public SwitchEntity _385b6710C24002e4Aa3c7d1cb13026d1InternetAccess => new(_haContext, "switch.385b6710_c240_02e4_aa3c_7d1cb13026d1_internet_access");
    ///<summary>AdGuard Home Filtering</summary>
    public SwitchEntity AdguardHomeFiltering => new(_haContext, "switch.adguard_home_filtering");
    ///<summary>AdGuard Home Parental control</summary>
    public SwitchEntity AdguardHomeParentalControl => new(_haContext, "switch.adguard_home_parental_control");
    ///<summary>AdGuard Home Protection</summary>
    public SwitchEntity AdguardHomeProtection => new(_haContext, "switch.adguard_home_protection");
    ///<summary>AdGuard Home Query log</summary>
    public SwitchEntity AdguardHomeQueryLog => new(_haContext, "switch.adguard_home_query_log");
    ///<summary>AdGuard Home Safe browsing</summary>
    public SwitchEntity AdguardHomeSafeBrowsing => new(_haContext, "switch.adguard_home_safe_browsing");
    ///<summary>AdGuard Home Safe search</summary>
    public SwitchEntity AdguardHomeSafeSearch => new(_haContext, "switch.adguard_home_safe_search");
    ///<summary>android-4db5a5b9f2c9a5dd Internet Access</summary>
    public SwitchEntity Android4db5a5b9f2c9a5ddInternetAccess => new(_haContext, "switch.android_4db5a5b9f2c9a5dd_internet_access");
    ///<summary>Fan</summary>
    public SwitchEntity BedMultiPlugL1 => new(_haContext, "switch.bed_multi_plug_l1");
    ///<summary>Sofa Nulti Center</summary>
    public SwitchEntity BedMultiPlugL2 => new(_haContext, "switch.bed_multi_plug_l2");
    ///<summary>TV</summary>
    public SwitchEntity BedMultiPlugL3 => new(_haContext, "switch.bed_multi_plug_l3");
    ///<summary>BigFridge-Powermeter</summary>
    public SwitchEntity BigfridgePowermeter => new(_haContext, "switch.bigfridge_powermeter");
    ///<summary>BigFridge-Powermeter Child lock</summary>
    public SwitchEntity BigfridgePowermeterChildLock => new(_haContext, "switch.bigfridge_powermeter_child_lock");
    ///<summary>BL-65-34-64 Internet Access</summary>
    public SwitchEntity Bl653464InternetAccess => new(_haContext, "switch.bl_65_34_64_internet_access");
    ///<summary>Modem Plug</summary>
    public SwitchEntity BrightLightPlug => new(_haContext, "switch.bright_light_plug");
    ///<summary>chromecastwithgoogletv Internet Access</summary>
    public SwitchEntity ChromecastwithgoogletvInternetAccess => new(_haContext, "switch.chromecastwithgoogletv_internet_access");
    ///<summary>Desk Fans</summary>
    public SwitchEntity DeskFans => new(_haContext, "switch.desk_fans");
    ///<summary>DESKTOP-9RQRGIO Internet Access</summary>
    public SwitchEntity Desktop9rqrgioInternetAccess => new(_haContext, "switch.desktop_9rqrgio_internet_access");
    ///<summary>DESKTOP-K24V8NP Internet Access</summary>
    public SwitchEntity DesktopK24v8npInternetAccess => new(_haContext, "switch.desktop_k24v8np_internet_access");
    ///<summary>Ecoflow AC Always On</summary>
    public SwitchEntity EcoflowAcAlwaysOn => new(_haContext, "switch.ecoflow_ac_always_on");
    ///<summary>Ecoflow AC Enabled</summary>
    public SwitchEntity EcoflowAcEnabled => new(_haContext, "switch.ecoflow_ac_enabled");
    ///<summary>Ecoflow Backup Reserve Enabled</summary>
    public SwitchEntity EcoflowBackupReserveEnabled => new(_haContext, "switch.ecoflow_backup_reserve_enabled");
    ///<summary>Ecoflow Beeper</summary>
    public SwitchEntity EcoflowBeeper => new(_haContext, "switch.ecoflow_beeper");
    ///<summary>Ecoflow DC (12V) Enabled</summary>
    public SwitchEntity EcoflowDc12vEnabled => new(_haContext, "switch.ecoflow_dc_12v_enabled");
    ///<summary>Ecoflow Plug</summary>
    public SwitchEntity EcoflowPlug => new(_haContext, "switch.ecoflow_plug");
    ///<summary>Ecoflow Prio Solar Charging</summary>
    public SwitchEntity EcoflowPrioSolarCharging => new(_haContext, "switch.ecoflow_prio_solar_charging");
    ///<summary>Ecoflow USB Enabled</summary>
    public SwitchEntity EcoflowUsbEnabled => new(_haContext, "switch.ecoflow_usb_enabled");
    ///<summary>Ecoflow X-Boost Enabled</summary>
    public SwitchEntity EcoflowXBoostEnabled => new(_haContext, "switch.ecoflow_x_boost_enabled");
    ///<summary>EcoFlowCloud Pre-release</summary>
    public SwitchEntity EcoflowcloudPreRelease => new(_haContext, "switch.ecoflowcloud_pre_release");
    ///<summary>ELECTROLUX_OEM LED</summary>
    public SwitchEntity ElectroluxOemLed => new(_haContext, "switch.electrolux_oem_led");
    ///<summary>Envy Internet Access</summary>
    public SwitchEntity EnvyInternetAccess => new(_haContext, "switch.envy_internet_access");
    ///<summary>Envy Internet Access</summary>
    public SwitchEntity EnvyInternetAccess2 => new(_haContext, "switch.envy_internet_access_2");
    ///<summary>esp32-A86888 Internet Access</summary>
    public SwitchEntity Esp32A86888InternetAccess => new(_haContext, "switch.esp32_a86888_internet_access");
    ///<summary>Desktop-disctance Internet Access</summary>
    public SwitchEntity Esp32Ee4b54InternetAccess => new(_haContext, "switch.esp32_ee4b54_internet_access");
    ///<summary>ecoflow Internet Access</summary>
    public SwitchEntity EspressifInternetAccess => new(_haContext, "switch.espressif_internet_access");
    ///<summary>Speaker Plug</summary>
    public SwitchEntity FanPlug => new(_haContext, "switch.fan_plug");
    ///<summary>FRITZ!Box 6660 Cable Port forward 36</summary>
    public SwitchEntity FritzBox6660CablePortForward36 => new(_haContext, "switch.fritz_box_6660_cable_port_forward_36");
    ///<summary>FRITZ!Box 6660 Cable Port forward HTTP-Server</summary>
    public SwitchEntity FritzBox6660CablePortForwardHttpServer => new(_haContext, "switch.fritz_box_6660_cable_port_forward_http_server");
    ///<summary>FRITZ!Box 6660 Cable Port forward HTTP-Server 8123</summary>
    public SwitchEntity FritzBox6660CablePortForwardHttpServer8123 => new(_haContext, "switch.fritz_box_6660_cable_port_forward_http_server_8123");
    ///<summary>FRITZ!Box 6660 Cable Port forward HTTPS-Server</summary>
    public SwitchEntity FritzBox6660CablePortForwardHttpsServer => new(_haContext, "switch.fritz_box_6660_cable_port_forward_https_server");
    ///<summary>FRITZ!Box 6660 Cable Port forward Maxcio Pistoke</summary>
    public SwitchEntity FritzBox6660CablePortForwardMaxcioPistoke => new(_haContext, "switch.fritz_box_6660_cable_port_forward_maxcio_pistoke");
    ///<summary>FRITZ!Box 6660 Cable Port forward remote1</summary>
    public SwitchEntity FritzBox6660CablePortForwardRemote1 => new(_haContext, "switch.fritz_box_6660_cable_port_forward_remote1");
    ///<summary>FRITZ!Box 6660 Cable Port forward Remote2</summary>
    public SwitchEntity FritzBox6660CablePortForwardRemote2 => new(_haContext, "switch.fritz_box_6660_cable_port_forward_remote2");
    ///<summary>FRITZ!Box 6660 Cable Wi-Fi FRITZ!Box guest access</summary>
    public SwitchEntity FritzBox6660CableWiFiFritzBoxGuestAccess => new(_haContext, "switch.fritz_box_6660_cable_wi_fi_fritz_box_guest_access");
    ///<summary>FRITZ!Box 6660 Cable Wi-Fi Kotiverkko (2.4Ghz)</summary>
    public SwitchEntity FritzBox6660CableWiFiKotiverkko24ghz => new(_haContext, "switch.fritz_box_6660_cable_wi_fi_kotiverkko_2_4ghz");
    ///<summary>FRITZ!Box 6660 Cable Wi-Fi Kotiverkko (5Ghz)</summary>
    public SwitchEntity FritzBox6660CableWiFiKotiverkko5ghz => new(_haContext, "switch.fritz_box_6660_cable_wi_fi_kotiverkko_5ghz");
    ///<summary>Galaxy-A51 Internet Access</summary>
    public SwitchEntity GalaxyA51InternetAccess => new(_haContext, "switch.galaxy_a51_internet_access");
    ///<summary>fuchsia-1c53-f9e1-9a4e Internet Access</summary>
    public SwitchEntity GoogleNestHubInternetAccess => new(_haContext, "switch.google_nest_hub_internet_access");
    ///<summary>Google-Nest-Mini Internet Access</summary>
    public SwitchEntity GoogleNestMiniInternetAccess => new(_haContext, "switch.google_nest_mini_internet_access");
    ///<summary>Hallway Sensor Led indication</summary>
    public SwitchEntity HallwaySensorLedIndication => new(_haContext, "switch.hallway_sensor_led_indication");
    ///<summary>homeAssistant Internet Access</summary>
    public SwitchEntity HomeassistantInternetAccess => new(_haContext, "switch.homeassistant_internet_access");
    ///<summary>homeassistant Internet Access</summary>
    public SwitchEntity HomeassistantInternetAccess2 => new(_haContext, "switch.homeassistant_internet_access_2");
    ///<summary>homeassistantcontainer Internet Access</summary>
    public SwitchEntity HomeassistantcontainerInternetAccess => new(_haContext, "switch.homeassistantcontainer_internet_access");
    ///<summary>Tv Power Plug</summary>
    public SwitchEntity InkplatePlug => new(_haContext, "switch.inkplate_plug");
    ///<summary>Inkplate-plug Child lock</summary>
    public SwitchEntity InkplatePlugChildLock => new(_haContext, "switch.inkplate_plug_child_lock");
    ///<summary>IR-Remote Internet Access</summary>
    public SwitchEntity IrRemoteInternetAccess => new(_haContext, "switch.ir_remote_internet_access");
    ///<summary>jaeaekaapinlaempoemittari Internet Access</summary>
    public SwitchEntity JaeaekaapinlaempoemittariInternetAccess => new(_haContext, "switch.jaeaekaapinlaempoemittari_internet_access");
    ///<summary>Kitchen PowerMeter-Plug</summary>
    public SwitchEntity KitchenPowermeterPlug => new(_haContext, "switch.kitchen_powermeter_plug");
    ///<summary>Kitchen PowerMeter-Plug Child lock</summary>
    public SwitchEntity KitchenPowermeterPlugChildLock => new(_haContext, "switch.kitchen_powermeter_plug_child_lock");
    ///<summary>Kitchen Sensor Led indication</summary>
    public SwitchEntity KitchenSensorLedIndication => new(_haContext, "switch.kitchen_sensor_led_indication");
    ///<summary>LAPTOP-RNUSI7LB Internet Access</summary>
    public SwitchEntity LaptopRnusi7lbInternetAccess => new(_haContext, "switch.laptop_rnusi7lb_internet_access");
    ///<summary>Light-Sensor Internet Access</summary>
    public SwitchEntity LightSensorInternetAccess => new(_haContext, "switch.light_sensor_internet_access");
    ///<summary>mainpc Internet Access</summary>
    public SwitchEntity MainpcInternetAccess => new(_haContext, "switch.mainpc_internet_access");
    ///<summary>maxciopistoke Internet Access</summary>
    public SwitchEntity MaxciopistokeInternetAccess => new(_haContext, "switch.maxciopistoke_internet_access");
    ///<summary>mediaserver Internet Access</summary>
    public SwitchEntity MediaserverInternetAccess => new(_haContext, "switch.mediaserver_internet_access");
    ///<summary>Misc-PowerMeter</summary>
    public SwitchEntity MiscPowermeter => new(_haContext, "switch.misc_powermeter");
    ///<summary>Misc-PowerMeter Child lock</summary>
    public SwitchEntity MiscPowermeterChildLock => new(_haContext, "switch.misc_powermeter_child_lock");
    ///<summary>mkspi Internet Access</summary>
    public SwitchEntity MkspiInternetAccess => new(_haContext, "switch.mkspi_internet_access");
    ///<summary>Modem and Proxmox PowerMeter</summary>
    public SwitchEntity ModemAndProxmoxPowermeter => new(_haContext, "switch.modem_and_proxmox_powermeter");
    ///<summary>Modem and Proxmox PowerMeter Child lock</summary>
    public SwitchEntity ModemAndProxmoxPowermeterChildLock => new(_haContext, "switch.modem_and_proxmox_powermeter_child_lock");
    ///<summary>Modem Auto On Plug</summary>
    public SwitchEntity ModemAutoOnPlug => new(_haContext, "switch.modem_auto_on_plug");
    ///<summary>Modem Auto On Plug Child lock</summary>
    public SwitchEntity ModemAutoOnPlugChildLock => new(_haContext, "switch.modem_auto_on_plug_child_lock");
    ///<summary>nintendoswitch Internet Access</summary>
    public SwitchEntity NintendoswitchInternetAccess => new(_haContext, "switch.nintendoswitch_internet_access");
    ///<summary>sleepanalyzer Internet Access</summary>
    public SwitchEntity Pc192168021InternetAccess => new(_haContext, "switch.pc_192_168_0_21_internet_access");
    ///<summary>switchlan Internet Access</summary>
    public SwitchEntity Pc192168024InternetAccess => new(_haContext, "switch.pc_192_168_0_24_internet_access");
    ///<summary>Jellyfin Internet Access</summary>
    public SwitchEntity Pc5680C34602F8InternetAccess => new(_haContext, "switch.pc_56_80_c3_46_02_f8_internet_access");
    ///<summary>minitemp-humiditysensor Internet Access</summary>
    public SwitchEntity PcA09208902291InternetAccess => new(_haContext, "switch.pc_a0_92_08_90_22_91_internet_access");
    ///<summary>DESKTOP-AOTDDD2 Internet Access</summary>
    public SwitchEntity PcB4Ae2bE4A3F8InternetAccess => new(_haContext, "switch.pc_b4_ae_2b_e4_a3_f8_internet_access");
    ///<summary>Laptop Charger</summary>
    public SwitchEntity PcMultipowermeterLaptop => new(_haContext, "switch.pc_multipowermeter_laptop");
    ///<summary>Bright Light</summary>
    public SwitchEntity PcMultipowermeterLplug => new(_haContext, "switch.pc_multipowermeter_lplug");
    ///<summary>Monitors</summary>
    public SwitchEntity PcMultipowermeterMonitors => new(_haContext, "switch.pc_multipowermeter_monitors");
    ///<summary>PC-Plug</summary>
    public SwitchEntity PcPlug => new(_haContext, "switch.pc_plug");
    ///<summary>PC-Plug Child lock</summary>
    public SwitchEntity PcPlugChildLock => new(_haContext, "switch.pc_plug_child_lock");
    ///<summary>Puhelin Internet Access</summary>
    public SwitchEntity PuhelinInternetAccess => new(_haContext, "switch.puhelin_internet_access");
    ///<summary>Puhelin Internet Access</summary>
    public SwitchEntity PuhelinInternetAccess2 => new(_haContext, "switch.puhelin_internet_access_2");
    ///<summary>Qnap</summary>
    public SwitchEntity Qnap => new(_haContext, "switch.qnap");
    ///<summary>raspberrypi Internet Access</summary>
    public SwitchEntity RaspberrypiInternetAccess => new(_haContext, "switch.raspberrypi_internet_access");
    ///<summary>Schedule #01bf9d</summary>
    public SwitchEntity Schedule01bf9d => new(_haContext, "switch.schedule_01bf9d");
    ///<summary>Schedule #606cd1</summary>
    public SwitchEntity Schedule606cd1 => new(_haContext, "switch.schedule_606cd1");
    ///<summary>Schedule #74a63f</summary>
    public SwitchEntity Schedule74a63f => new(_haContext, "switch.schedule_74a63f");
    ///<summary>Schedule #ca82ae</summary>
    public SwitchEntity ScheduleCa82ae => new(_haContext, "switch.schedule_ca82ae");
    ///<summary>Schedule #e85023</summary>
    public SwitchEntity ScheduleE85023 => new(_haContext, "switch.schedule_e85023");
    ///<summary>Starkvind Child lock</summary>
    public SwitchEntity StarkvindChildLock => new(_haContext, "switch.starkvind_child_lock");
    ///<summary>Starkvind Led enable</summary>
    public SwitchEntity StarkvindLedEnable => new(_haContext, "switch.starkvind_led_enable");
    ///<summary>Switchbot Ecoflow</summary>
    public SwitchEntity SwitchbotEcoflow => new(_haContext, "switch.switchbot_ecoflow");
    ///<summary>Switchbot Ecoflow Reverse</summary>
    public SwitchEntity SwitchbotEcoflowReverse => new(_haContext, "switch.switchbot_ecoflow_reverse");
    ///<summary>Switchbot Ecoflow Touch</summary>
    public SwitchEntity SwitchbotEcoflowTouch => new(_haContext, "switch.switchbot_ecoflow_touch");
    ///<summary>TBD-PowerMeter</summary>
    public SwitchEntity TbdPowermeter => new(_haContext, "switch.tbd_powermeter");
    ///<summary>TBD-PowerMeter Child lock</summary>
    public SwitchEntity TbdPowermeterChildLock => new(_haContext, "switch.tbd_powermeter_child_lock");
    ///<summary>Light-Sensor Internet Access</summary>
    public SwitchEntity ToiletDisctanceInternetAccess => new(_haContext, "switch.toilet_disctance_internet_access");
    ///<summary>Toilet Power Plug</summary>
    public SwitchEntity ToiletPowerPlug => new(_haContext, "switch.toilet_power_plug");
    ///<summary>Toilet Power Plug Child lock</summary>
    public SwitchEntity ToiletPowerPlugChildLock => new(_haContext, "switch.toilet_power_plug_child_lock");
    ///<summary>Toilet Sensor Led indication</summary>
    public SwitchEntity ToiletSensorLedIndication => new(_haContext, "switch.toilet_sensor_led_indication");
    ///<summary>Tv Power Meter</summary>
    public SwitchEntity TvPowerMeter => new(_haContext, "switch.tv_power_meter");
    ///<summary>Tv Power Meter Child lock</summary>
    public SwitchEntity TvPowerMeterChildLock => new(_haContext, "switch.tv_power_meter_child_lock");
    ///<summary>Uno--Light-Sensor Internet Access</summary>
    public SwitchEntity UnoLightSensorInternetAccess => new(_haContext, "switch.uno_light_sensor_internet_access");
    ///<summary>Fan Desk Top</summary>
    public SwitchEntity UsbMultiFansCenter => new(_haContext, "switch.usb_multi_fans_center");
    ///<summary>Fan Desk Under</summary>
    public SwitchEntity UsbMultiFansLeft => new(_haContext, "switch.usb_multi_fans_left");
    ///<summary>USB Inkplate</summary>
    public SwitchEntity UsbMultiFansRight => new(_haContext, "switch.usb_multi_fans_right");
    ///<summary>zatman-MacBookPro Internet Access</summary>
    public SwitchEntity ZatmanMacbookproInternetAccess => new(_haContext, "switch.zatman_macbookpro_internet_access");
    ///<summary>Zatnas Internet Access</summary>
    public SwitchEntity ZatnasInternetAccess => new(_haContext, "switch.zatnas_internet_access");
    ///<summary>Zigbee2MQTT Bridge Permit join</summary>
    public SwitchEntity Zigbee2mqttBridgePermitJoin => new(_haContext, "switch.zigbee2mqtt_bridge_permit_join");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AdGuard Home Update</summary>
    public UpdateEntity AdguardHomeUpdate => new(_haContext, "update.adguard_home_update");
    ///<summary>apexcharts-card update</summary>
    public UpdateEntity ApexchartsCardUpdate => new(_haContext, "update.apexcharts_card_update");
    ///<summary>Assist Microphone Update</summary>
    public UpdateEntity AssistMicrophoneUpdate => new(_haContext, "update.assist_microphone_update");
    ///<summary>Assist Microphone Update</summary>
    public UpdateEntity AssistMicrophoneUpdate2 => new(_haContext, "update.assist_microphone_update_2");
    ///<summary>Bed Light</summary>
    public UpdateEntity BedLight => new(_haContext, "update.bed_light");
    ///<summary>Bed Light Plug</summary>
    public UpdateEntity BedLightPlug => new(_haContext, "update.bed_light_plug");
    ///<summary>BigFridge-Powermeter</summary>
    public UpdateEntity BigfridgePowermeter => new(_haContext, "update.bigfridge_powermeter");
    ///<summary>card-mod update</summary>
    public UpdateEntity CardModUpdate => new(_haContext, "update.card_mod_update");
    ///<summary>chrony Update</summary>
    public UpdateEntity ChronyUpdate => new(_haContext, "update.chrony_update");
    ///<summary>Custom-icon-color update</summary>
    public UpdateEntity CustomIconColorUpdate => new(_haContext, "update.custom_icon_color_update");
    ///<summary>Desktop Light</summary>
    public UpdateEntity DesktopLight => new(_haContext, "update.desktop_light");
    ///<summary>Duck DNS Update</summary>
    public UpdateEntity DuckDnsUpdate => new(_haContext, "update.duck_dns_update");
    ///<summary>EcoFlow BLE update</summary>
    public UpdateEntity EcoflowBleUpdate => new(_haContext, "update.ecoflow_ble_update");
    ///<summary>Ecoflow Plug</summary>
    public UpdateEntity EcoflowPlug => new(_haContext, "update.ecoflow_plug");
    ///<summary>EcoFlowCloud update</summary>
    public UpdateEntity EcoflowcloudUpdate => new(_haContext, "update.ecoflowcloud_update");
    ///<summary>Electrolux Climate Component update</summary>
    public UpdateEntity ElectroluxClimateComponentUpdate => new(_haContext, "update.electrolux_climate_component_update");
    ///<summary>Fan Plug</summary>
    public UpdateEntity FanPlug => new(_haContext, "update.fan_plug");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>FlashForge Adventurer 3 update</summary>
    public UpdateEntity FlashforgeAdventurer3Update => new(_haContext, "update.flashforge_adventurer_3_update");
    ///<summary>FRITZ!Box 6660 Cable FRITZ!OS</summary>
    public UpdateEntity FritzBox6660CableFritzOs => new(_haContext, "update.fritz_box_6660_cable_fritz_os");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Hallway Light</summary>
    public UpdateEntity HallwayLight => new(_haContext, "update.hallway_light");
    ///<summary>Hallway Sensor</summary>
    public UpdateEntity HallwaySensor => new(_haContext, "update.hallway_sensor");
    ///<summary>HASS.Agent 2 Integration - Media Player &amp; Notifications update</summary>
    public UpdateEntity HassAgent2IntegrationMediaPlayerNotificationsUpdate => new(_haContext, "update.hass_agent_2_integration_media_player_notifications_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Hue Switch Bed</summary>
    public UpdateEntity HueSwitchBed => new(_haContext, "update.hue_switch_bed");
    ///<summary>Hue Switch Living Room</summary>
    public UpdateEntity HueSwitchLivingRoom => new(_haContext, "update.hue_switch_living_room");
    ///<summary>Inkplate-plug</summary>
    public UpdateEntity InkplatePlug => new(_haContext, "update.inkplate_plug");
    ///<summary>Kiosk Mode update</summary>
    public UpdateEntity KioskModeUpdate => new(_haContext, "update.kiosk_mode_update");
    ///<summary>Kitchen Light</summary>
    public UpdateEntity KitchenLight => new(_haContext, "update.kitchen_light");
    ///<summary>Kitchen PowerMeter-Plug</summary>
    public UpdateEntity KitchenPowermeterPlug => new(_haContext, "update.kitchen_powermeter_plug");
    ///<summary>Kitchen Sensor</summary>
    public UpdateEntity KitchenSensor => new(_haContext, "update.kitchen_sensor");
    ///<summary>layout-card update</summary>
    public UpdateEntity LayoutCardUpdate => new(_haContext, "update.layout_card_update");
    ///<summary>Living Room Light</summary>
    public UpdateEntity LivingRoomLight => new(_haContext, "update.living_room_light");
    ///<summary>Livingroom Climatemeter</summary>
    public UpdateEntity LivingroomClimatemeter => new(_haContext, "update.livingroom_climatemeter");
    ///<summary>LivingRoomFP1</summary>
    public UpdateEntity Livingroomfp1 => new(_haContext, "update.livingroomfp1");
    ///<summary>Lovelace Kindle Screensaver Update</summary>
    public UpdateEntity LovelaceKindleScreensaverUpdate => new(_haContext, "update.lovelace_kindle_screensaver_update");
    ///<summary>MariaDB Update</summary>
    public UpdateEntity MariadbUpdate => new(_haContext, "update.mariadb_update");
    ///<summary>Misc-PowerMeter</summary>
    public UpdateEntity MiscPowermeter => new(_haContext, "update.misc_powermeter");
    ///<summary>Modem and Proxmox PowerMeter</summary>
    public UpdateEntity ModemAndProxmoxPowermeter => new(_haContext, "update.modem_and_proxmox_powermeter");
    ///<summary>Modem Auto On Plug</summary>
    public UpdateEntity ModemAutoOnPlug => new(_haContext, "update.modem_auto_on_plug");
    ///<summary>Monitor Light</summary>
    public UpdateEntity MonitorLight => new(_haContext, "update.monitor_light");
    ///<summary>Moonraker update</summary>
    public UpdateEntity MoonrakerUpdate => new(_haContext, "update.moonraker_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Multiple Entity Row update</summary>
    public UpdateEntity MultipleEntityRowUpdate => new(_haContext, "update.multiple_entity_row_update");
    ///<summary>Music Assistant Server Update</summary>
    public UpdateEntity MusicAssistantServerUpdate => new(_haContext, "update.music_assistant_server_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>Nginx Proxy Manager Update</summary>
    public UpdateEntity NginxProxyManagerUpdate => new(_haContext, "update.nginx_proxy_manager_update");
    ///<summary>nordpool update</summary>
    public UpdateEntity NordpoolUpdate => new(_haContext, "update.nordpool_update");
    ///<summary>openWakeWord Update</summary>
    public UpdateEntity OpenwakewordUpdate => new(_haContext, "update.openwakeword_update");
    ///<summary>PC-Plug</summary>
    public UpdateEntity PcPlug => new(_haContext, "update.pc_plug");
    ///<summary>PC Sensor</summary>
    public UpdateEntity PcSensor => new(_haContext, "update.pc_sensor");
    ///<summary>Piper Update</summary>
    public UpdateEntity PiperUpdate => new(_haContext, "update.piper_update");
    ///<summary>Powercalc update</summary>
    public UpdateEntity PowercalcUpdate => new(_haContext, "update.powercalc_update");
    ///<summary>Proxmox VE update</summary>
    public UpdateEntity ProxmoxVeUpdate => new(_haContext, "update.proxmox_ve_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Scheduler Card update</summary>
    public UpdateEntity SchedulerCardUpdate => new(_haContext, "update.scheduler_card_update");
    ///<summary>Scheduler component update</summary>
    public UpdateEntity SchedulerComponentUpdate => new(_haContext, "update.scheduler_component_update");
    ///<summary>slider-entity-row update</summary>
    public UpdateEntity SliderEntityRowUpdate => new(_haContext, "update.slider_entity_row_update");
    ///<summary>Starkvind</summary>
    public UpdateEntity Starkvind => new(_haContext, "update.starkvind");
    ///<summary>Storage Light</summary>
    public UpdateEntity StorageLight => new(_haContext, "update.storage_light");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>TBD-PowerMeter</summary>
    public UpdateEntity TbdPowermeter => new(_haContext, "update.tbd_powermeter");
    ///<summary>template-entity-row update</summary>
    public UpdateEntity TemplateEntityRowUpdate => new(_haContext, "update.template_entity_row_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Time Picker Card update</summary>
    public UpdateEntity TimePickerCardUpdate => new(_haContext, "update.time_picker_card_update");
    ///<summary>Toilet Light_1</summary>
    public UpdateEntity ToiletLight1 => new(_haContext, "update.toilet_light_1");
    ///<summary>Toilet Power Plug</summary>
    public UpdateEntity ToiletPowerPlug => new(_haContext, "update.toilet_power_plug");
    ///<summary>Toilet Sensor</summary>
    public UpdateEntity ToiletSensor => new(_haContext, "update.toilet_sensor");
    ///<summary>Tv Power Meter</summary>
    public UpdateEntity TvPowerMeter => new(_haContext, "update.tv_power_meter");
    ///<summary>VLC Update</summary>
    public UpdateEntity VlcUpdate => new(_haContext, "update.vlc_update");
    ///<summary>Whisper Update</summary>
    public UpdateEntity WhisperUpdate => new(_haContext, "update.whisper_update");
    ///<summary>Zigbee2MQTT Update</summary>
    public UpdateEntity Zigbee2mqttUpdate => new(_haContext, "update.zigbee2mqtt_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Home</summary>
    public WeatherEntity ForecastHome => new(_haContext, "weather.forecast_home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public RemoteEntity LivingRoomTv => new(_haContext, "remote.living_room_tv");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>faster-whisper</summary>
    public SttEntity FasterWhisper => new(_haContext, "stt.faster_whisper");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>piper</summary>
    public TtsEntity Piper => new(_haContext, "tts.piper");
}

public partial class ImageEntities
{
    private readonly IHaContext _haContext;
    public ImageEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>FRITZ!Box 6660 Cable FRITZ!Box guest access</summary>
    public ImageEntity FritzBox6660CableFritzBoxGuestAccess => new(_haContext, "image.fritz_box_6660_cable_fritz_box_guest_access");
}

public partial class CounterEntities
{
    private readonly IHaContext _haContext;
    public CounterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Last Know Step Count</summary>
    public CounterEntity LastKnowStepCount => new(_haContext, "counter.last_know_step_count");
}

public partial class WakeWordEntities
{
    private readonly IHaContext _haContext;
    public WakeWordEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>openwakeword</summary>
    public WakeWordEntity Openwakeword => new(_haContext, "wake_word.openwakeword");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>weathercam_digitraffic_fi</summary>
    public CameraEntity WeathercamDigitrafficFi => new(_haContext, "camera.weathercam_digitraffic_fi");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ELECTROLUX_OEM</summary>
    public ClimateEntity ElectroluxOem => new(_haContext, "climate.electrolux_oem");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>LightCycler_BedLights</summary>
    public InputButtonEntity LightcyclerBedlights => new(_haContext, "input_button.lightcycler_bedlights");
    ///<summary>LightCycler_DesktopLights</summary>
    public InputButtonEntity LightcyclerDesktoplights => new(_haContext, "input_button.lightcycler_desktoplights");
    ///<summary>LightCycler_SofaLights</summary>
    public InputButtonEntity LightcyclerSofalights => new(_haContext, "input_button.lightcycler_sofalights");
}

public partial class FanEntities
{
    private readonly IHaContext _haContext;
    public FanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Starkvind</summary>
    public FanEntity Starkvind => new(_haContext, "fan.starkvind");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Withings Workouts</summary>
    public CalendarEntity WithingsWorkouts => new(_haContext, "calendar.withings_workouts");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Folder Watcher /share</summary>
    public EventEntity FolderWatcherShare => new(_haContext, "event.folder_watcher_share");
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    [JsonPropertyName("hysteresis")]
    public double? Hysteresis { get; init; }

    [JsonPropertyName("lower")]
    public double? Lower { get; init; }

    [JsonPropertyName("position")]
    public string? Position { get; init; }

    [JsonPropertyName("sensor_value")]
    public object? SensorValue { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("upper")]
    public double? Upper { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public object? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("is_lost")]
    public bool? IsLost { get; init; }

    [JsonPropertyName("last_lost_timestamp")]
    public string? LastLostTimestamp { get; init; }

    [JsonPropertyName("last_timestamp")]
    public string? LastTimestamp { get; init; }

    [JsonPropertyName("ring_state")]
    public string? RingState { get; init; }

    [JsonPropertyName("voip_state")]
    public string? VoipState { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("last_time_reachable")]
    public string? LastTimeReachable { get; init; }

    [JsonPropertyName("connected_to")]
    public string? ConnectedTo { get; init; }

    [JsonPropertyName("connection_type")]
    public string? ConnectionType { get; init; }

    [JsonPropertyName("ssid")]
    public string? Ssid { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color_mode")]
    public object? ColorMode { get; init; }

    [JsonPropertyName("brightness")]
    public object? Brightness { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_album_artist")]
    public string? MediaAlbumArtist { get; init; }

    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public object? EntityPictureLocal { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("mass_player_id")]
    public string? MassPlayerId { get; init; }

    [JsonPropertyName("mass_player_type")]
    public string? MassPlayerType { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<object>? GroupMembers { get; init; }

    [JsonPropertyName("group_leader")]
    public object? GroupLeader { get; init; }

    [JsonPropertyName("active_queue")]
    public string? ActiveQueue { get; init; }

    [JsonPropertyName("active_group")]
    public object? ActiveGroup { get; init; }

    [JsonPropertyName("items_in_queue")]
    public double? ItemsInQueue { get; init; }

    [JsonPropertyName("queue_index")]
    public double? QueueIndex { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_action")]
    public string? LastAction { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("android.appInfo")]
    public string? Android_appInfo { get; init; }

    [JsonPropertyName("android.reduced.images")]
    public bool? Android_reduced_images { get; init; }

    [JsonPropertyName("android.showWhen")]
    public bool? Android_showWhen { get; init; }

    [JsonPropertyName("android.text")]
    public string? Android_text { get; init; }

    [JsonPropertyName("android.title")]
    public string? Android_title { get; init; }

    [JsonPropertyName("category")]
    public string? Category { get; init; }

    [JsonPropertyName("channel_id")]
    public string? ChannelId { get; init; }

    [JsonPropertyName("group_id")]
    public string? GroupId { get; init; }

    [JsonPropertyName("hw_disable_ntf_delete_menu")]
    public bool? HwDisableNtfDeleteMenu { get; init; }

    [JsonPropertyName("is_clearable")]
    public bool? IsClearable { get; init; }

    [JsonPropertyName("is_ongoing")]
    public bool? IsOngoing { get; init; }

    [JsonPropertyName("package")]
    public string? Package { get; init; }

    [JsonPropertyName("post_time")]
    public double? PostTime { get; init; }

    [JsonPropertyName("album_ak.alizandro.smartaudiobookplayer")]
    public string? AlbumAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("album_com.aimp.player")]
    public string? AlbumCom_aimp_player { get; init; }

    [JsonPropertyName("artist_ak.alizandro.smartaudiobookplayer")]
    public string? ArtistAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("artist_com.aimp.player")]
    public string? ArtistCom_aimp_player { get; init; }

    [JsonPropertyName("duration_ak.alizandro.smartaudiobookplayer")]
    public double? DurationAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("duration_com.aimp.player")]
    public double? DurationCom_aimp_player { get; init; }

    [JsonPropertyName("media_id_ak.alizandro.smartaudiobookplayer")]
    public string? MediaIdAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("media_id_com.aimp.player")]
    public string? MediaIdCom_aimp_player { get; init; }

    [JsonPropertyName("playback_position_ak.alizandro.smartaudiobookplayer")]
    public double? PlaybackPositionAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("playback_position_com.aimp.player")]
    public double? PlaybackPositionCom_aimp_player { get; init; }

    [JsonPropertyName("playback_state_ak.alizandro.smartaudiobookplayer")]
    public string? PlaybackStateAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("playback_state_com.aimp.player")]
    public string? PlaybackStateCom_aimp_player { get; init; }

    [JsonPropertyName("title_ak.alizandro.smartaudiobookplayer")]
    public string? TitleAk_alizandro_smartaudiobookplayer { get; init; }

    [JsonPropertyName("title_com.aimp.player")]
    public string? TitleCom_aimp_player { get; init; }

    [JsonPropertyName("total_media_session_count")]
    public double? TotalMediaSessionCount { get; init; }

    [JsonPropertyName("Name")]
    public string? Name_0 { get; init; }

    [JsonPropertyName("name")]
    public string? Name_1 { get; init; }

    [JsonPropertyName("Resolution")]
    public string? Resolution { get; init; }

    [JsonPropertyName("Width")]
    public double? Width { get; init; }

    [JsonPropertyName("Height")]
    public double? Height { get; init; }

    [JsonPropertyName("BitsPerPixel")]
    public double? BitsPerPixel { get; init; }

    [JsonPropertyName("PrimaryDisplay")]
    public bool? PrimaryDisplay { get; init; }

    [JsonPropertyName("WorkingArea")]
    public string? WorkingArea { get; init; }

    [JsonPropertyName("WorkingAreaWidth")]
    public double? WorkingAreaWidth { get; init; }

    [JsonPropertyName("WorkingAreaHeight")]
    public double? WorkingAreaHeight { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("AudioSessions")]
    public IReadOnlyList<object>? AudioSessions { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }

    [JsonPropertyName("album_com.google.android.googlequicksearchbox")]
    public string? AlbumCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("album_com.plexapp.android")]
    public string? AlbumCom_plexapp_android { get; init; }

    [JsonPropertyName("artist_com.google.android.googlequicksearchbox")]
    public string? ArtistCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("artist_com.plexapp.android")]
    public string? ArtistCom_plexapp_android { get; init; }

    [JsonPropertyName("duration_com.google.android.googlequicksearchbox")]
    public double? DurationCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("duration_com.plexapp.android")]
    public object? DurationCom_plexapp_android { get; init; }

    [JsonPropertyName("media_id_com.google.android.googlequicksearchbox")]
    public string? MediaIdCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("media_id_com.plexapp.android")]
    public string? MediaIdCom_plexapp_android { get; init; }

    [JsonPropertyName("playback_position_com.google.android.googlequicksearchbox")]
    public double? PlaybackPositionCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("playback_position_com.plexapp.android")]
    public object? PlaybackPositionCom_plexapp_android { get; init; }

    [JsonPropertyName("playback_state_com.google.android.googlequicksearchbox")]
    public string? PlaybackStateCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("playback_state_com.plexapp.android")]
    public string? PlaybackStateCom_plexapp_android { get; init; }

    [JsonPropertyName("title_com.google.android.googlequicksearchbox")]
    public string? TitleCom_google_android_googlequicksearchbox { get; init; }

    [JsonPropertyName("title_com.plexapp.android")]
    public string? TitleCom_plexapp_android { get; init; }

    [JsonPropertyName("NetworkInterfaceType")]
    public string? NetworkInterfaceType { get; init; }

    [JsonPropertyName("SpeedBitsPerSecond")]
    public double? SpeedBitsPerSecond { get; init; }

    [JsonPropertyName("OperationalStatus")]
    public string? OperationalStatus { get; init; }

    [JsonPropertyName("DataReceivedMB")]
    public double? DataReceivedMB { get; init; }

    [JsonPropertyName("DataSentMB")]
    public double? DataSentMB { get; init; }

    [JsonPropertyName("IncomingPacketsDiscarded")]
    public double? IncomingPacketsDiscarded { get; init; }

    [JsonPropertyName("IncomingPacketsWithErrors")]
    public double? IncomingPacketsWithErrors { get; init; }

    [JsonPropertyName("IncomingPacketsWithUnknownProtocol")]
    public double? IncomingPacketsWithUnknownProtocol { get; init; }

    [JsonPropertyName("OutgoingPacketsDiscarded")]
    public double? OutgoingPacketsDiscarded { get; init; }

    [JsonPropertyName("OutgoingPacketsWithErrors")]
    public double? OutgoingPacketsWithErrors { get; init; }

    [JsonPropertyName("IpAddresses")]
    public IReadOnlyList<string>? IpAddresses { get; init; }

    [JsonPropertyName("MacAddresses")]
    public IReadOnlyList<string>? MacAddresses { get; init; }

    [JsonPropertyName("Gateways")]
    public IReadOnlyList<string>? Gateways { get; init; }

    [JsonPropertyName("DhcpEnabled")]
    public bool? DhcpEnabled { get; init; }

    [JsonPropertyName("DhcpAddresses")]
    public IReadOnlyList<string>? DhcpAddresses { get; init; }

    [JsonPropertyName("DnsEnabled")]
    public bool? DnsEnabled { get; init; }

    [JsonPropertyName("DnsSuffix")]
    public string? DnsSuffix { get; init; }

    [JsonPropertyName("DnsAddresses")]
    public IReadOnlyList<string>? DnsAddresses { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("album_com.itunestoppodcastplayer.app")]
    public string? AlbumCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("artist_com.itunestoppodcastplayer.app")]
    public string? ArtistCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("duration_com.itunestoppodcastplayer.app")]
    public object? DurationCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("media_id_com.itunestoppodcastplayer.app")]
    public string? MediaIdCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("playback_position_com.itunestoppodcastplayer.app")]
    public object? PlaybackPositionCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("playback_state_com.itunestoppodcastplayer.app")]
    public string? PlaybackStateCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("title_com.itunestoppodcastplayer.app")]
    public string? TitleCom_itunestoppodcastplayer_app { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("SN")]
    public string? SN { get; init; }

    [JsonPropertyName("data_last_update")]
    public string? DataLastUpdate { get; init; }

    [JsonPropertyName("status_request_count")]
    public double? StatusRequestCount { get; init; }

    [JsonPropertyName("status_last_update")]
    public string? StatusLastUpdate { get; init; }

    [JsonPropertyName("reconnects")]
    public double? Reconnects { get; init; }

    [JsonPropertyName("status_phase")]
    public double? StatusPhase { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Model")]
    public string? Model { get; init; }

    [JsonPropertyName("Serial #")]
    public string? Serial { get; init; }

    [JsonPropertyName("Uptime")]
    public string? Uptime { get; init; }

    [JsonPropertyName("IP Address")]
    public string? IPAddress { get; init; }

    [JsonPropertyName("Mask")]
    public string? Mask { get; init; }

    [JsonPropertyName("MAC Address")]
    public string? MACAddress { get; init; }

    [JsonPropertyName("Max Speed")]
    public double? MaxSpeed { get; init; }

    [JsonPropertyName("Packets (Err)")]
    public double? PacketsErr { get; init; }

    [JsonPropertyName("source_entity")]
    public string? SourceEntity { get; init; }

    [JsonPropertyName("source_domain")]
    public string? SourceDomain { get; init; }

    [JsonPropertyName("album_com.android.chrome")]
    public string? AlbumCom_android_chrome { get; init; }

    [JsonPropertyName("artist_com.android.chrome")]
    public string? ArtistCom_android_chrome { get; init; }

    [JsonPropertyName("duration_com.android.chrome")]
    public double? DurationCom_android_chrome { get; init; }

    [JsonPropertyName("media_id_com.android.chrome")]
    public string? MediaIdCom_android_chrome { get; init; }

    [JsonPropertyName("playback_position_com.android.chrome")]
    public double? PlaybackPositionCom_android_chrome { get; init; }

    [JsonPropertyName("playback_state_com.android.chrome")]
    public string? PlaybackStateCom_android_chrome { get; init; }

    [JsonPropertyName("title_com.android.chrome")]
    public string? TitleCom_android_chrome { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("album_com.google.android.youtube")]
    public string? AlbumCom_google_android_youtube { get; init; }

    [JsonPropertyName("artist_com.google.android.youtube")]
    public string? ArtistCom_google_android_youtube { get; init; }

    [JsonPropertyName("duration_com.google.android.youtube")]
    public double? DurationCom_google_android_youtube { get; init; }

    [JsonPropertyName("media_id_com.google.android.youtube")]
    public string? MediaIdCom_google_android_youtube { get; init; }

    [JsonPropertyName("playback_position_com.google.android.youtube")]
    public double? PlaybackPositionCom_google_android_youtube { get; init; }

    [JsonPropertyName("playback_state_com.google.android.youtube")]
    public string? PlaybackStateCom_google_android_youtube { get; init; }

    [JsonPropertyName("title_com.google.android.youtube")]
    public string? TitleCom_google_android_youtube { get; init; }

    [JsonPropertyName("qemu_on_list")]
    public IReadOnlyList<string>? QemuOnList { get; init; }

    [JsonPropertyName("lxc_on_list")]
    public IReadOnlyList<object>? LxcOnList { get; init; }

    [JsonPropertyName("updates_list")]
    public object? UpdatesList { get; init; }

    [JsonPropertyName("icon_color")]
    public string? IconColor { get; init; }

    [JsonPropertyName("BluetoothDevices")]
    public IReadOnlyList<object>? BluetoothDevices { get; init; }

    [JsonPropertyName("online")]
    public bool? Online { get; init; }

    [JsonPropertyName("next_reset")]
    public string? NextReset { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("mqtt_connected")]
    public bool? MqttConnected { get; init; }

    [JsonPropertyName("progress")]
    public double? Progress { get; init; }

    [JsonPropertyName("printing")]
    public bool? Printing { get; init; }

    [JsonPropertyName("nozzle_temperature")]
    public double? NozzleTemperature { get; init; }

    [JsonPropertyName("desired_nozzle_temperature")]
    public double? DesiredNozzleTemperature { get; init; }

    [JsonPropertyName("bed_temperature")]
    public double? BedTemperature { get; init; }

    [JsonPropertyName("desired_bed_temperature")]
    public double? DesiredBedTemperature { get; init; }

    [JsonPropertyName("VirtualResolution")]
    public string? VirtualResolution { get; init; }

    [JsonPropertyName("VirtualWidth")]
    public double? VirtualWidth { get; init; }

    [JsonPropertyName("VirtualHeight")]
    public double? VirtualHeight { get; init; }

    [JsonPropertyName("RotatedDegrees")]
    public double? RotatedDegrees { get; init; }

    [JsonPropertyName("OutputDevices")]
    public IReadOnlyList<string>? OutputDevices { get; init; }

    [JsonPropertyName("InputDevices")]
    public IReadOnlyList<string>? InputDevices { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("average")]
    public double? Average { get; init; }

    [JsonPropertyName("off_peak_1")]
    public double? OffPeak1 { get; init; }

    [JsonPropertyName("off_peak_2")]
    public double? OffPeak2 { get; init; }

    [JsonPropertyName("peak")]
    public double? Peak { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("mean")]
    public double? Mean { get; init; }

    [JsonPropertyName("unit")]
    public string? Unit { get; init; }

    [JsonPropertyName("currency")]
    public string? Currency { get; init; }

    [JsonPropertyName("country")]
    public string? Country { get; init; }

    [JsonPropertyName("region")]
    public string? Region { get; init; }

    [JsonPropertyName("low_price")]
    public bool? LowPrice { get; init; }

    [JsonPropertyName("price_percent_to_average")]
    public double? PricePercentToAverage { get; init; }

    [JsonPropertyName("today")]
    public IReadOnlyList<double>? Today { get; init; }

    [JsonPropertyName("tomorrow")]
    public object? Tomorrow { get; init; }

    [JsonPropertyName("tomorrow_valid")]
    public bool? TomorrowValid { get; init; }

    [JsonPropertyName("raw_today")]
    public IReadOnlyList<object>? RawToday { get; init; }

    [JsonPropertyName("raw_tomorrow")]
    public IReadOnlyList<object>? RawTomorrow { get; init; }

    [JsonPropertyName("current_price")]
    public double? CurrentPrice { get; init; }

    [JsonPropertyName("additional_costs_current_hour")]
    public double? AdditionalCostsCurrentHour { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("price_in_cents")]
    public bool? PriceInCents { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("raw_state")]
    public double? RawState { get; init; }

    [JsonPropertyName("Design Capacity (mAh)")]
    public double? DesignCapacitymAh { get; init; }

    [JsonPropertyName("Full Capacity (mAh)")]
    public double? FullCapacitymAh { get; init; }

    [JsonPropertyName("Remain Capacity (mAh)")]
    public double? RemainCapacitymAh { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("Model")]
    public string? Model { get; init; }

    [JsonPropertyName("Serial #")]
    public string? Serial { get; init; }

    [JsonPropertyName("Uptime")]
    public string? Uptime { get; init; }

    [JsonPropertyName("Memory Size")]
    public string? MemorySize { get; init; }

    [JsonPropertyName("Volume Size")]
    public string? VolumeSize { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("Min Cell Temperature")]
    public double? MinCellTemperature { get; init; }

    [JsonPropertyName("Max Cell Temperature")]
    public double? MaxCellTemperature { get; init; }

    [JsonPropertyName("next_reset")]
    public string? NextReset { get; init; }

    [JsonPropertyName("source_entity")]
    public string? SourceEntity { get; init; }

    [JsonPropertyName("source_domain")]
    public string? SourceDomain { get; init; }

    [JsonPropertyName("online")]
    public bool? Online { get; init; }

    [JsonPropertyName("progress")]
    public double? Progress { get; init; }

    [JsonPropertyName("printing")]
    public bool? Printing { get; init; }

    [JsonPropertyName("nozzle_temperature")]
    public double? NozzleTemperature { get; init; }

    [JsonPropertyName("desired_nozzle_temperature")]
    public double? DesiredNozzleTemperature { get; init; }

    [JsonPropertyName("bed_temperature")]
    public double? BedTemperature { get; init; }

    [JsonPropertyName("desired_bed_temperature")]
    public double? DesiredBedTemperature { get; init; }

    [JsonPropertyName("calculation_mode")]
    public string? CalculationMode { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("energy_sensor_entity_id")]
    public string? EnergySensorEntityId { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<string>? Entities { get; init; }

    [JsonPropertyName("is_group")]
    public bool? IsGroup { get; init; }

    [JsonPropertyName("weather")]
    public string? Weather { get; init; }

    [JsonPropertyName("brightness")]
    public string? Brightness { get; init; }

    [JsonPropertyName("humidity")]
    public string? Humidity { get; init; }

    [JsonPropertyName("quality")]
    public string? Quality { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("weekdays")]
    public IReadOnlyList<string>? Weekdays { get; init; }

    [JsonPropertyName("timeslots")]
    public IReadOnlyList<string>? Timeslots { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<string>? Entities { get; init; }

    [JsonPropertyName("actions")]
    public IReadOnlyList<object>? Actions { get; init; }

    [JsonPropertyName("current_slot")]
    public double? CurrentSlot { get; init; }

    [JsonPropertyName("next_slot")]
    public double? NextSlot { get; init; }

    [JsonPropertyName("next_trigger")]
    public string? NextTrigger { get; init; }

    [JsonPropertyName("tags")]
    public IReadOnlyList<object>? Tags { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("internal_ip")]
    public string? InternalIp { get; init; }

    [JsonPropertyName("internal_port")]
    public double? InternalPort { get; init; }

    [JsonPropertyName("external_port")]
    public double? ExternalPort { get; init; }

    [JsonPropertyName("protocol")]
    public string? Protocol { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("standard")]
    public string? Standard { get; init; }

    [JsonPropertyName("bssid")]
    public string? Bssid { get; init; }

    [JsonPropertyName("mac_address_control")]
    public bool? MacAddressControl { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public object? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public object? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public object? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ImageEntity : Entity<ImageEntity, EntityState<ImageAttributes>, ImageAttributes>
{
    public ImageEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ImageEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ImageAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record CounterEntity : Entity<CounterEntity, EntityState<CounterAttributes>, CounterAttributes>
{
    public CounterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CounterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CounterAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record WakeWordEntity : Entity<WakeWordEntity, EntityState<WakeWordAttributes>, WakeWordAttributes>
{
    public WakeWordEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WakeWordEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WakeWordAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record FanEntity : Entity<FanEntity, EntityState<FanAttributes>, FanAttributes>
{
    public FanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public FanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record FanAttributes
{
    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }

    [JsonPropertyName("preset_mode")]
    public object? PresetMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("path")]
    public string? Path { get; init; }

    [JsonPropertyName("file")]
    public string? File { get; init; }

    [JsonPropertyName("folder")]
    public string? Folder { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AdguardServices Adguard { get; }

    AssistSatelliteServices AssistSatellite { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FritzServices Fritz { get; }

    FrontendServices Frontend { get; }

    GoogleAssistantServices GoogleAssistant { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HistoryStatsServices HistoryStats { get; }

    HomeassistantServices Homeassistant { get; }

    ImageServices Image { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    MusicAssistantServices MusicAssistant { get; }

    NordpoolServices Nordpool { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PowercalcServices Powercalc { get; }

    RecorderServices Recorder { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    SchedulerServices Scheduler { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShellCommandServices ShellCommand { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    WakeOnLanServices WakeOnLan { get; }

    WeatherServices Weather { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AdguardServices Adguard => new(_haContext);
    public AssistSatelliteServices AssistSatellite => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FritzServices Fritz => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleAssistantServices GoogleAssistant => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HistoryStatsServices HistoryStats => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public ImageServices Image => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public MusicAssistantServices MusicAssistant => new(_haContext);
    public NordpoolServices Nordpool => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PowercalcServices Powercalc => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public SchedulerServices Scheduler => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShellCommandServices ShellCommand => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AdguardServices
{
    private readonly IHaContext _haContext;
    public AdguardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new filter subscription to AdGuard Home.</summary>
    public void AddUrl(AdguardAddUrlParameters data)
    {
        _haContext.CallService("adguard", "add_url", null, data);
    }

    ///<summary>Adds a new filter subscription to AdGuard Home.</summary>
    ///<param name="name">The name of the filter subscription. eg: Example</param>
    ///<param name="url">The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</param>
    public void AddUrl(string name, string url)
    {
        _haContext.CallService("adguard", "add_url", null, new AdguardAddUrlParameters { Name = name, Url = url });
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    public void DisableUrl(AdguardDisableUrlParameters data)
    {
        _haContext.CallService("adguard", "disable_url", null, data);
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</param>
    public void DisableUrl(string url)
    {
        _haContext.CallService("adguard", "disable_url", null, new AdguardDisableUrlParameters { Url = url });
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    public void EnableUrl(AdguardEnableUrlParameters data)
    {
        _haContext.CallService("adguard", "enable_url", null, data);
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</param>
    public void EnableUrl(string url)
    {
        _haContext.CallService("adguard", "enable_url", null, new AdguardEnableUrlParameters { Url = url });
    }

    ///<summary>Refreshes all filter subscriptions in AdGuard Home.</summary>
    public void Refresh(AdguardRefreshParameters data)
    {
        _haContext.CallService("adguard", "refresh", null, data);
    }

    ///<summary>Refreshes all filter subscriptions in AdGuard Home.</summary>
    ///<param name="force">Force update (bypasses AdGuard Home throttling), omit for a regular refresh.</param>
    public void Refresh(bool? force = null)
    {
        _haContext.CallService("adguard", "refresh", null, new AdguardRefreshParameters { Force = force });
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    public void RemoveUrl(AdguardRemoveUrlParameters data)
    {
        _haContext.CallService("adguard", "remove_url", null, data);
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</param>
    public void RemoveUrl(string url)
    {
        _haContext.CallService("adguard", "remove_url", null, new AdguardRemoveUrlParameters { Url = url });
    }
}

public partial record AdguardAddUrlParameters
{
    ///<summary>The name of the filter subscription. eg: Example</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardDisableUrlParameters
{
    ///<summary>The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardEnableUrlParameters
{
    ///<summary>The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardRefreshParameters
{
    ///<summary>Force update (bypasses AdGuard Home throttling), omit for a regular refresh.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AdguardRemoveUrlParameters
{
    ///<summary>The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class AssistSatelliteServices
{
    private readonly IHaContext _haContext;
    public AssistSatelliteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lets a satellite announce a message.</summary>
    ///<param name="target">The target for this service call</param>
    public void Announce(ServiceTarget target, AssistSatelliteAnnounceParameters data)
    {
        _haContext.CallService("assist_satellite", "announce", target, data);
    }

    ///<summary>Lets a satellite announce a message.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">The message to announce. eg: Time to wake up!</param>
    ///<param name="mediaId">The media ID to announce instead of using text-to-speech.</param>
    public void Announce(ServiceTarget target, string? message = null, string? mediaId = null)
    {
        _haContext.CallService("assist_satellite", "announce", target, new AssistSatelliteAnnounceParameters { Message = message, MediaId = mediaId });
    }

    ///<summary>Starts a conversation from a satellite.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartConversation(ServiceTarget target, AssistSatelliteStartConversationParameters data)
    {
        _haContext.CallService("assist_satellite", "start_conversation", target, data);
    }

    ///<summary>Starts a conversation from a satellite.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startMessage">The message to start with. eg: You left the lights on in the living room. Turn them off?</param>
    ///<param name="startMediaId">The media ID to start with instead of using text-to-speech.</param>
    ///<param name="extraSystemPrompt">Provide background information to the AI about the request.</param>
    public void StartConversation(ServiceTarget target, string? startMessage = null, string? startMediaId = null, string? extraSystemPrompt = null)
    {
        _haContext.CallService("assist_satellite", "start_conversation", target, new AssistSatelliteStartConversationParameters { StartMessage = startMessage, StartMediaId = startMediaId, ExtraSystemPrompt = extraSystemPrompt });
    }
}

public partial record AssistSatelliteAnnounceParameters
{
    ///<summary>The message to announce. eg: Time to wake up!</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>The media ID to announce instead of using text-to-speech.</summary>
    [JsonPropertyName("media_id")]
    public string? MediaId { get; init; }
}

public partial record AssistSatelliteStartConversationParameters
{
    ///<summary>The message to start with. eg: You left the lights on in the living room. Turn them off?</summary>
    [JsonPropertyName("start_message")]
    public string? StartMessage { get; init; }

    ///<summary>The media ID to start with instead of using text-to-speech.</summary>
    [JsonPropertyName("start_media_id")]
    public string? StartMediaId { get; init; }

    ///<summary>Provide background information to the AI about the request.</summary>
    [JsonPropertyName("extra_system_prompt")]
    public string? ExtraSystemPrompt { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup with automatic backup settings.</summary>
    public void CreateAutomatic()
    {
        _haContext.CallService("backup", "create_automatic", null);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from Start time for the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The URL path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The URL path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("climate", "toggle", target);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FritzServices
{
    private readonly IHaContext _haContext;
    public FritzServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a new password for the guest Wi-Fi. The password must be between 8 and 63 characters long. If no additional parameter is set, the password will be auto-generated with a length of 12 characters.</summary>
    public void SetGuestWifiPassword(FritzSetGuestWifiPasswordParameters data)
    {
        _haContext.CallService("fritz", "set_guest_wifi_password", null, data);
    }

    ///<summary>Sets a new password for the guest Wi-Fi. The password must be between 8 and 63 characters long. If no additional parameter is set, the password will be auto-generated with a length of 12 characters.</summary>
    ///<param name="deviceId">Select the Fritz!Box to configure.</param>
    ///<param name="password">New password for the guest Wi-Fi.</param>
    ///<param name="length">Length of the new password. The password will be auto-generated, if no password is set.</param>
    public void SetGuestWifiPassword(string deviceId, string? password = null, long? length = null)
    {
        _haContext.CallService("fritz", "set_guest_wifi_password", null, new FritzSetGuestWifiPasswordParameters { DeviceId = deviceId, Password = password, Length = length });
    }
}

public partial record FritzSetGuestWifiPasswordParameters
{
    ///<summary>Select the Fritz!Box to configure.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>New password for the guest Wi-Fi.</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Length of the new password. The password will be auto-generated, if no password is set.</summary>
    [JsonPropertyName("length")]
    public long? Length { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleAssistantServices
{
    private readonly IHaContext _haContext;
    public GoogleAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    public void RequestSync(GoogleAssistantRequestSyncParameters data)
    {
        _haContext.CallService("google_assistant", "request_sync", null, data);
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    ///<param name="agentUserId">Only needed for automations. Specific Home Assistant user ID (not username, ID in Settings &gt; People &gt; Users &gt; under username) to sync with Google Assistant. Not needed when you use this action through Home Assistant frontend or API. Used in automation, script or other place where context.user_id is missing.</param>
    public void RequestSync(string? agentUserId = null)
    {
        _haContext.CallService("google_assistant", "request_sync", null, new GoogleAssistantRequestSyncParameters { AgentUserId = agentUserId });
    }
}

public partial record GoogleAssistantRequestSyncParameters
{
    ///<summary>Only needed for automations. Specific Home Assistant user ID (not username, ID in Settings &gt; People &gt; Users &gt; under username) to sync with Google Assistant. Not needed when you use this action through Home Assistant frontend or API. Used in automation, script or other place where context.user_id is missing.</summary>
    [JsonPropertyName("agent_user_id")]
    public string? AgentUserId { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on to update. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on to update. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HistoryStatsServices
{
    private readonly IHaContext _haContext;
    public HistoryStatsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads history stats sensors from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("history_stats", "reload", null);
    }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the Core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class ImageServices
{
    private readonly IHaContext _haContext;
    public ImageServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, ImageSnapshotParameters data)
    {
        _haContext.CallService("image", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("image", "snapshot", target, new ImageSnapshotParameters { Filename = filename });
    }
}

public partial record ImageSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, string options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public string? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("advanced_fields")]
    public object? AdvancedFields { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void BrowseMedia(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        _haContext.CallService("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public void BrowseMedia(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        _haContext.CallService("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerBrowseMediaParameters
{
    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Whether the media (one or all) should be played in a loop or not.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether the media should be played in randomized order or not.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object? payload = null, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class MusicAssistantServices
{
    private readonly IHaContext _haContext;
    public MusicAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    public void GetLibrary(MusicAssistantGetLibraryParameters data)
    {
        _haContext.CallService("music_assistant", "get_library", null, data);
    }

    ///<summary>Retrieves items from a Music Assistant library.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="mediaType">The media type for which to request details for. eg: playlist</param>
    ///<param name="favorite">Filter items so only favorites items are returned. eg: true</param>
    ///<param name="search">Optional search string to search through this library. eg: We Are The Champions</param>
    ///<param name="limit">Maximum number of items to return. eg: 25</param>
    ///<param name="offset">Offset to start the list from. eg: 25</param>
    ///<param name="orderBy">Sort the list by this field. eg: random</param>
    ///<param name="albumType">Filter albums by type. eg: single</param>
    ///<param name="albumArtistsOnly">Only return album artists when listing the artists library items. eg: true</param>
    public void GetLibrary(object configEntryId, object mediaType, bool? favorite = null, string? search = null, long? limit = null, long? offset = null, object? orderBy = null, object? albumType = null, bool? albumArtistsOnly = null)
    {
        _haContext.CallService("music_assistant", "get_library", null, new MusicAssistantGetLibraryParameters { ConfigEntryId = configEntryId, MediaType = mediaType, Favorite = favorite, Search = search, Limit = limit, Offset = offset, OrderBy = orderBy, AlbumType = albumType, AlbumArtistsOnly = albumArtistsOnly });
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetQueue(ServiceTarget target)
    {
        _haContext.CallService("music_assistant", "get_queue", target);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayAnnouncement(ServiceTarget target, MusicAssistantPlayAnnouncementParameters data)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public void PlayAnnouncement(ServiceTarget target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        _haContext.CallService("music_assistant", "play_announcement", target, new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MusicAssistantPlayMediaParameters data)
    {
        _haContext.CallService("music_assistant", "play_media", target, data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public void PlayMedia(ServiceTarget target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        _haContext.CallService("music_assistant", "play_media", target, new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    public void Search(MusicAssistantSearchParameters data)
    {
        _haContext.CallService("music_assistant", "search", null, data);
    }

    ///<summary>Performs a global search on the Music Assistant library and all providers.</summary>
    ///<param name="configEntryId">Select the Music Assistant instance to perform the search on.</param>
    ///<param name="name">The name/title to search for. eg: We Are The Champions</param>
    ///<param name="mediaType">The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="limit">Maximum number of items to return (per media type). eg: 25</param>
    ///<param name="libraryOnly">Only include results that are in the library. eg: true</param>
    public void Search(object configEntryId, string name, object? mediaType = null, string? artist = null, string? album = null, long? limit = null, bool? libraryOnly = null)
    {
        _haContext.CallService("music_assistant", "search", null, new MusicAssistantSearchParameters { ConfigEntryId = configEntryId, Name = name, MediaType = mediaType, Artist = artist, Album = album, Limit = limit, LibraryOnly = libraryOnly });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TransferQueue(ServiceTarget target, MusicAssistantTransferQueueParameters data)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public void TransferQueue(ServiceTarget target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        _haContext.CallService("music_assistant", "transfer_queue", target, new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }
}

public partial record MusicAssistantGetLibraryParameters
{
    ///<summary>Select the Music Assistant instance to perform the search on.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>The media type for which to request details for. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public object? MediaType { get; init; }

    ///<summary>Filter items so only favorites items are returned. eg: true</summary>
    [JsonPropertyName("favorite")]
    public bool? Favorite { get; init; }

    ///<summary>Optional search string to search through this library. eg: We Are The Champions</summary>
    [JsonPropertyName("search")]
    public string? Search { get; init; }

    ///<summary>Maximum number of items to return. eg: 25</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }

    ///<summary>Offset to start the list from. eg: 25</summary>
    [JsonPropertyName("offset")]
    public long? Offset { get; init; }

    ///<summary>Sort the list by this field. eg: random</summary>
    [JsonPropertyName("order_by")]
    public object? OrderBy { get; init; }

    ///<summary>Filter albums by type. eg: single</summary>
    [JsonPropertyName("album_type")]
    public object? AlbumType { get; init; }

    ///<summary>Only return album artists when listing the artists library items. eg: true</summary>
    [JsonPropertyName("album_artists_only")]
    public bool? AlbumArtistsOnly { get; init; }
}

public partial record MusicAssistantPlayAnnouncementParameters
{
    ///<summary>URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</summary>
    [JsonPropertyName("use_pre_announce")]
    public bool? UsePreAnnounce { get; init; }

    ///<summary>Use a forced volume level for the announcement. Omit to use player default. eg: 75</summary>
    [JsonPropertyName("announce_volume")]
    public long? AnnounceVolume { get; init; }
}

public partial record MusicAssistantPlayMediaParameters
{
    ///<summary>URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</summary>
    [JsonPropertyName("media_id")]
    public object? MediaId { get; init; }

    ///<summary>The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public object? MediaType { get; init; }

    ///<summary>When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</summary>
    [JsonPropertyName("artist")]
    public string? Artist { get; init; }

    ///<summary>When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</summary>
    [JsonPropertyName("album")]
    public string? Album { get; init; }

    ///<summary>If the content should be played now or added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>Enable radio mode to auto-generate a playlist based on the selection.</summary>
    [JsonPropertyName("radio_mode")]
    public bool? RadioMode { get; init; }
}

public partial record MusicAssistantSearchParameters
{
    ///<summary>Select the Music Assistant instance to perform the search on.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }

    ///<summary>The name/title to search for. eg: We Are The Champions</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted. eg: playlist</summary>
    [JsonPropertyName("media_type")]
    public object? MediaType { get; init; }

    ///<summary>When specifying a track or album name in the name field, you can optionally restrict results by this artist name. eg: Queen</summary>
    [JsonPropertyName("artist")]
    public string? Artist { get; init; }

    ///<summary>When specifying a track name in the name field, you can optionally restrict results by this album name. eg: News of the world</summary>
    [JsonPropertyName("album")]
    public string? Album { get; init; }

    ///<summary>Maximum number of items to return (per media type). eg: 25</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }

    ///<summary>Only include results that are in the library. eg: true</summary>
    [JsonPropertyName("library_only")]
    public bool? LibraryOnly { get; init; }
}

public partial record MusicAssistantTransferQueueParameters
{
    ///<summary>The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</summary>
    [JsonPropertyName("source_player")]
    public string? SourcePlayer { get; init; }

    ///<summary>Start playing the queue on the target player. Omit to use the default behavior. eg: true</summary>
    [JsonPropertyName("auto_play")]
    public bool? AutoPlay { get; init; }
}

public partial class NordpoolServices
{
    private readonly IHaContext _haContext;
    public NordpoolServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    public void Daily(NordpoolDailyParameters data)
    {
        _haContext.CallService("nordpool", "daily", null, data);
    }

    ///<summary>Action that gets the raw aggrigated daily prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Daily(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "daily", null, new NordpoolDailyParameters { Currency = currency, Year = year, Area = area });
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    public void Hourly(NordpoolHourlyParameters data)
    {
        _haContext.CallService("nordpool", "hourly", null, data);
    }

    ///<summary>Action that gets the raw hourly price for spesific date from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="date">For what year, default to currect year eg: YYYY-MM-DD</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Hourly(object? currency = null, object? date = null, object? area = null)
    {
        _haContext.CallService("nordpool", "hourly", null, new NordpoolHourlyParameters { Currency = currency, Date = date, Area = area });
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    public void Monthly(NordpoolMonthlyParameters data)
    {
        _haContext.CallService("nordpool", "monthly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated monthly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Monthly(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "monthly", null, new NordpoolMonthlyParameters { Currency = currency, Year = year, Area = area });
    }

    public void Weekly()
    {
        _haContext.CallService("nordpool", "weekly", null);
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    public void Yearly(NordpoolYearlyParameters data)
    {
        _haContext.CallService("nordpool", "yearly", null, data);
    }

    ///<summary>Action that gets the raw aggrigated yearly prices from Nordpool</summary>
    ///<param name="currency">What currecy should the prices be returned in eg: NOK</param>
    ///<param name="year">For what year, default to currect year eg: 2024</param>
    ///<param name="area">Return the prices for what price area eg: NO2</param>
    public void Yearly(object? currency = null, object? year = null, object? area = null)
    {
        _haContext.CallService("nordpool", "yearly", null, new NordpoolYearlyParameters { Currency = currency, Year = year, Area = area });
    }
}

public partial record NordpoolDailyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolHourlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: YYYY-MM-DD</summary>
    [JsonPropertyName("date")]
    public object? Date { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolMonthlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial record NordpoolYearlyParameters
{
    ///<summary>What currecy should the prices be returned in eg: NOK</summary>
    [JsonPropertyName("currency")]
    public object? Currency { get; init; }

    ///<summary>For what year, default to currect year eg: 2024</summary>
    [JsonPropertyName("year")]
    public object? Year { get; init; }

    ///<summary>Return the prices for what price area eg: NO2</summary>
    [JsonPropertyName("area")]
    public object? Area { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the envy service.</summary>
    public void Envy(NotifyEnvyParameters data)
    {
        _haContext.CallService("notify", "envy", null, data);
    }

    ///<summary>Sends a notification message using the envy service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Envy(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "envy", null, new NotifyEnvyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_moto_g_8_power_lite integration.</summary>
    public void MobileAppMotoG8PowerLite(NotifyMobileAppMotoG8PowerLiteParameters data)
    {
        _haContext.CallService("notify", "mobile_app_moto_g_8_power_lite", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_moto_g_8_power_lite integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppMotoG8PowerLite(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_moto_g_8_power_lite", null, new NotifyMobileAppMotoG8PowerLiteParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_sm_t530 integration.</summary>
    public void MobileAppSmT530(NotifyMobileAppSmT530Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_sm_t530", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_sm_t530 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmT530(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_sm_t530", null, new NotifyMobileAppSmT530Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the pc service.</summary>
    public void Pc(NotifyPcParameters data)
    {
        _haContext.CallService("notify", "pc", null, data);
    }

    ///<summary>Sends a notification message using the pc service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Pc(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "pc", null, new NotifyPcParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyEnvyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppMotoG8PowerLiteParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSmT530Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPcParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PowercalcServices
{
    private readonly IHaContext _haContext;
    public PowercalcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void ActivatePlaybook(ServiceTarget target, PowercalcActivatePlaybookParameters data)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public void ActivatePlaybook(ServiceTarget target, string playbookId)
    {
        _haContext.CallService("powercalc", "activate_playbook", target, new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateEnergy(ServiceTarget target, PowercalcCalibrateEnergyParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_energy", target, new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void CalibrateUtilityMeter(ServiceTarget target, PowercalcCalibrateUtilityMeterParameters data)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set. eg: 100</param>
    public void CalibrateUtilityMeter(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "calibrate_utility_meter", target, new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Batch change configuration of all Powercalc config entries</summary>
    public void ChangeGuiConfig(PowercalcChangeGuiConfigParameters data)
    {
        _haContext.CallService("powercalc", "change_gui_config", null, data);
    }

    ///<summary>Batch change configuration of all Powercalc config entries</summary>
    ///<param name="field">The field you&apos;d like to change</param>
    ///<param name="value">The value to set.</param>
    public void ChangeGuiConfig(object @field, string value)
    {
        _haContext.CallService("powercalc", "change_gui_config", null, new PowercalcChangeGuiConfigParameters { Field = @field, Value = value });
    }

    ///<summary>Get current running playbook</summary>
    public void GetActivePlaybook()
    {
        _haContext.CallService("powercalc", "get_active_playbook", null);
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    ///<param name="target">The target for this service call</param>
    public void GetGroupEntities(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "get_group_entities", target);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseDailyEnergy(ServiceTarget target, PowercalcIncreaseDailyEnergyParameters data)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public void IncreaseDailyEnergy(ServiceTarget target, string value)
    {
        _haContext.CallService("powercalc", "increase_daily_energy", target, new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reload Powercalc configuration and entities</summary>
    public void Reload()
    {
        _haContext.CallService("powercalc", "reload", null);
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetEnergy(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "reset_energy", target);
    }

    ///<summary>Stop currently active playbook.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopPlaybook(ServiceTarget target)
    {
        _haContext.CallService("powercalc", "stop_playbook", target);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    public void SwitchSubProfile(ServiceTarget target, PowercalcSwitchSubProfileParameters data)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public void SwitchSubProfile(ServiceTarget target, string profile)
    {
        _haContext.CallService("powercalc", "switch_sub_profile", target, new PowercalcSwitchSubProfileParameters { Profile = profile });
    }

    ///<summary>Update the profile library and reinitialize discovery</summary>
    public void UpdateLibrary()
    {
        _haContext.CallService("powercalc", "update_library", null);
    }
}

public partial record PowercalcActivatePlaybookParameters
{
    ///<summary>Playbook identifier. eg: program1</summary>
    [JsonPropertyName("playbook_id")]
    public string? PlaybookId { get; init; }
}

public partial record PowercalcCalibrateEnergyParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcCalibrateUtilityMeterParameters
{
    ///<summary>The value to set. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcChangeGuiConfigParameters
{
    ///<summary>The field you&apos;d like to change</summary>
    [JsonPropertyName("field")]
    public object? Field { get; init; }

    ///<summary>The value to set.</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcIncreaseDailyEnergyParameters
{
    ///<summary>Amount to add to the sensor. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record PowercalcSwitchSubProfileParameters
{
    ///<summary>Define one of the possible sub profiles eg: night_vision</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target)
    {
        _haContext.CallService("scene", "delete", target);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetSchedule(ServiceTarget target)
    {
        _haContext.CallService("schedule", "get_schedule", target);
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class SchedulerServices
{
    private readonly IHaContext _haContext;
    public SchedulerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new schedule entity</summary>
    public void Add(SchedulerAddParameters data)
    {
        _haContext.CallService("scheduler", "add", null, data);
    }

    ///<summary>Create a new schedule entity</summary>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Add(object timeslots, object repeatType, object? weekdays = null, object? startDate = null, object? endDate = null, string? name = null)
    {
        _haContext.CallService("scheduler", "add", null, new SchedulerAddParameters { Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Duplicate a schedule entity</summary>
    public void Copy(SchedulerCopyParameters data)
    {
        _haContext.CallService("scheduler", "copy", null, data);
    }

    ///<summary>Duplicate a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="name">Friendly name for the copied schedule eg: My schedule</param>
    public void Copy(string entityId, string? name = null)
    {
        _haContext.CallService("scheduler", "copy", null, new SchedulerCopyParameters { EntityId = entityId, Name = name });
    }

    ///<summary>Disables all schedules</summary>
    public void DisableAll()
    {
        _haContext.CallService("scheduler", "disable_all", null);
    }

    ///<summary>Edit a schedule entity</summary>
    public void Edit(SchedulerEditParameters data)
    {
        _haContext.CallService("scheduler", "edit", null, data);
    }

    ///<summary>Edit a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="weekdays">Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</param>
    ///<param name="startDate">Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</param>
    ///<param name="endDate">Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</param>
    ///<param name="timeslots">list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</param>
    ///<param name="repeatType">Control what happens after the schedule is triggered eg: &quot;repeat&quot;</param>
    ///<param name="name">Friendly name for the schedule eg: My schedule</param>
    public void Edit(string entityId, object? weekdays = null, object? startDate = null, object? endDate = null, object? timeslots = null, object? repeatType = null, string? name = null)
    {
        _haContext.CallService("scheduler", "edit", null, new SchedulerEditParameters { EntityId = entityId, Weekdays = weekdays, StartDate = startDate, EndDate = endDate, Timeslots = timeslots, RepeatType = repeatType, Name = name });
    }

    ///<summary>Enables all schedules</summary>
    public void EnableAll()
    {
        _haContext.CallService("scheduler", "enable_all", null);
    }

    ///<summary>Remove a schedule entity</summary>
    public void Remove(SchedulerRemoveParameters data)
    {
        _haContext.CallService("scheduler", "remove", null, data);
    }

    ///<summary>Remove a schedule entity</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    public void Remove(string entityId)
    {
        _haContext.CallService("scheduler", "remove", null, new SchedulerRemoveParameters { EntityId = entityId });
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    public void RunAction(SchedulerRunActionParameters data)
    {
        _haContext.CallService("scheduler", "run_action", null, data);
    }

    ///<summary>Execute the action of a schedule, optionally at a given time.</summary>
    ///<param name="entityId">Identifier of the scheduler entity. eg: switch.schedule_abcdef</param>
    ///<param name="time">Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</param>
    ///<param name="skipConditions">Whether the conditions of the schedule should be skipped or not</param>
    public void RunAction(string entityId, DateTime? time = null, bool? skipConditions = null)
    {
        _haContext.CallService("scheduler", "run_action", null, new SchedulerRunActionParameters { EntityId = entityId, Time = time, SkipConditions = skipConditions });
    }
}

public partial record SchedulerAddParameters
{
    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerCopyParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Friendly name for the copied schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerEditParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Days of the week for which the schedule should be repeated eg: [&quot;daily&quot;]</summary>
    [JsonPropertyName("weekdays")]
    public object? Weekdays { get; init; }

    ///<summary>Date from which schedule should be executed eg: [&quot;2021-01-01&quot;]</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>Date until which schedule should be executed eg: [&quot;2021-12-31&quot;]</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>list of timeslots with their actions and optionally conditions (should be kept the same for all timeslots) eg: [{start: &quot;12:00&quot;, stop: &quot;13:00&quot;, actions: [{service: &quot;light.turn_on&quot;, entity_id: &quot;light.my_lamp&quot;, service_data: {brightness: 200}}]}]</summary>
    [JsonPropertyName("timeslots")]
    public object? Timeslots { get; init; }

    ///<summary>Control what happens after the schedule is triggered eg: &quot;repeat&quot;</summary>
    [JsonPropertyName("repeat_type")]
    public object? RepeatType { get; init; }

    ///<summary>Friendly name for the schedule eg: My schedule</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record SchedulerRemoveParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record SchedulerRunActionParameters
{
    ///<summary>Identifier of the scheduler entity. eg: switch.schedule_abcdef</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Time for which to evaluate the action (only useful for schedules with multiple timeslot) eg: &quot;12:00&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>Whether the conditions of the schedule should be skipped or not</summary>
    [JsonPropertyName("skip_conditions")]
    public bool? SkipConditions { get; init; }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void _1659477669028()
    {
        _haContext.CallService("script", "1659477669028", null);
    }

    public void Actiontodoatalarm()
    {
        _haContext.CallService("script", "actiontodoatalarm", null);
    }

    public void AvVolumeDown()
    {
        _haContext.CallService("script", "av_volume_down", null);
    }

    public void AvVolumeUp()
    {
        _haContext.CallService("script", "av_volume_up", null);
    }

    public void Clearplaylists()
    {
        _haContext.CallService("script", "clearplaylists", null);
    }

    public void LaunchYoutube()
    {
        _haContext.CallService("script", "launch_youtube", null);
    }

    public void PccancelShutDown()
    {
        _haContext.CallService("script", "pccancel_shut_down", null);
    }

    public void PcturnOffPc()
    {
        _haContext.CallService("script", "pcturn_off_pc", null);
    }

    public void PlayInterfaceSound()
    {
        _haContext.CallService("script", "play_interface_sound", null);
    }

    public void PlayMorningMusic()
    {
        _haContext.CallService("script", "play_morning_music", null);
    }

    public void Playmoomin()
    {
        _haContext.CallService("script", "playmoomin", null);
    }

    public void PowerSavingMode()
    {
        _haContext.CallService("script", "power_saving_mode", null);
    }

    public void ReadOutElectricityPrice()
    {
        _haContext.CallService("script", "read_out_electricity_price", null);
    }

    public void ReadoutLasttimeAwoken()
    {
        _haContext.CallService("script", "readout_lasttime_awoken", null);
    }

    public void ReadoutTime()
    {
        _haContext.CallService("script", "readout_time", null);
    }

    public void RefreshInkplate()
    {
        _haContext.CallService("script", "refresh_inkplate", null);
    }

    public void RefreshInkplateInstant()
    {
        _haContext.CallService("script", "refresh_inkplate_instant", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void ResetAllPowermeters()
    {
        _haContext.CallService("script", "reset_all_powermeters", null);
    }

    public void RestartModem()
    {
        _haContext.CallService("script", "restart_modem", null);
    }

    ///<summary>Send a audio notification</summary>
    public void SendAudioNotification(ScriptSendAudioNotificationParameters data)
    {
        _haContext.CallService("script", "send_audio_notification", null, data);
    }

    ///<summary>Send a audio notification</summary>
    ///<param name="title">The title of the notification eg: State change</param>
    ///<param name="message">The message content eg: The light is on!</param>
    public void SendAudioNotification(object? title = null, object? message = null)
    {
        _haContext.CallService("script", "send_audio_notification", null, new ScriptSendAudioNotificationParameters { Title = title, Message = message });
    }

    ///<summary>Send a audio notification</summary>
    public void SendAudioNotificationFile(ScriptSendAudioNotificationFileParameters data)
    {
        _haContext.CallService("script", "send_audio_notification_file", null, data);
    }

    ///<summary>Send a audio notification</summary>
    ///<param name="title">The title of the notification eg: State change</param>
    ///<param name="message">The message content eg: The light is on!</param>
    public void SendAudioNotificationFile(object? title = null, object? message = null)
    {
        _haContext.CallService("script", "send_audio_notification_file", null, new ScriptSendAudioNotificationFileParameters { Title = title, Message = message });
    }

    public void Sendishomephonenotification()
    {
        _haContext.CallService("script", "sendishomephonenotification", null);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    public void TurnOffEverything()
    {
        _haContext.CallService("script", "turn_off_everything", null);
    }

    public void TurnOffProxmoxAndServer()
    {
        _haContext.CallService("script", "turn_off_proxmox_and_server", null);
    }

    public void TurnOffServer()
    {
        _haContext.CallService("script", "turn_off_server", null);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }

    public void TurnOnPcForLora()
    {
        _haContext.CallService("script", "turn_on_pc_for_lora", null);
    }

    public void TurnOnPcNormal()
    {
        _haContext.CallService("script", "turn_on_pc_normal", null);
    }

    public void TurnOnServer()
    {
        _haContext.CallService("script", "turn_on_server", null);
    }

    public void TurnOnServerManual()
    {
        _haContext.CallService("script", "turn_on_server_manual", null);
    }
}

public partial record ScriptSendAudioNotificationParameters
{
    ///<summary>The title of the notification eg: State change</summary>
    [JsonPropertyName("title")]
    public object? Title { get; init; }

    ///<summary>The message content eg: The light is on!</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial record ScriptSendAudioNotificationFileParameters
{
    ///<summary>The title of the notification eg: State change</summary>
    [JsonPropertyName("title")]
    public object? Title { get; init; }

    ///<summary>The message content eg: The light is on!</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShellCommandServices
{
    private readonly IHaContext _haContext;
    public ShellCommandServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void TurnOffQnap()
    {
        _haContext.CallService("shell_command", "turn_off_qnap", null);
    }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with picotts.</summary>
    public void PicottsSay(TtsPicottsSayParameters data)
    {
        _haContext.CallService("tts", "picotts_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with picotts.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void PicottsSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "picotts_say", null, new TtsPicottsSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsPicottsSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("utility_meter", "reset", target);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">The port to send the magic packet to. Defaults to `9` and is normally not changed.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, long? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>The port to send the magic packet to. Defaults to `9` and is normally not changed.</summary>
    [JsonPropertyName("broadcast_port")]
    public long? BroadcastPort { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>The scope of the weather forecast.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class CounterEntityExtensionMethods
{
    ///<summary>Decrements a counter by its step size.</summary>
    public static void Decrement(this CounterEntity target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements a counter by its step size.</summary>
    public static void Decrement(this IEnumerable<CounterEntity> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments a counter by its step size.</summary>
    public static void Increment(this CounterEntity target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments a counter by its step size.</summary>
    public static void Increment(this IEnumerable<CounterEntity> target)
    {
        target.CallService("increment");
    }

    ///<summary>Resets a counter to its initial value.</summary>
    public static void Reset(this CounterEntity target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets a counter to its initial value.</summary>
    public static void Reset(this IEnumerable<CounterEntity> target)
    {
        target.CallService("reset");
    }

    ///<summary>Sets the counter to a specific value.</summary>
    public static void SetValue(this CounterEntity target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    public static void SetValue(this IEnumerable<CounterEntity> target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The CounterEntity to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this CounterEntity target, long value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The IEnumerable&lt;CounterEntity&gt; to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this IEnumerable<CounterEntity> target, long value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }
}

public static class FanEntityExtensionMethods
{
    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this FanEntity target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this FanEntity target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this FanEntity target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this IEnumerable<FanEntity> target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this FanEntity target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this IEnumerable<FanEntity> target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this FanEntity target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this IEnumerable<FanEntity> target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this FanEntity target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this IEnumerable<FanEntity> target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this FanEntity target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this IEnumerable<FanEntity> target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this FanEntity target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this IEnumerable<FanEntity> target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this FanEntity target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this FanEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this FanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this IEnumerable<FanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this FanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this IEnumerable<FanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this FanEntity target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this IEnumerable<FanEntity> target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this FanEntity target, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this IEnumerable<FanEntity> target, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public static class ImageEntityExtensionMethods
{
    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this ImageEntity target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    public static void Snapshot(this IEnumerable<ImageEntity> target, ImageSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The ImageEntity to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this ImageEntity target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from an image.</summary>
    ///<param name="target">The IEnumerable&lt;ImageEntity&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/image_snapshot.jpg</param>
    public static void Snapshot(this IEnumerable<ImageEntity> target, string filename)
    {
        target.CallService("snapshot", new ImageSnapshotParameters { Filename = filename });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("increment");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, string options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, string options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? advancedFields = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="advancedFields"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? kelvin = null, long? brightnessPct = null, long? brightnessStepPct = null, string? effect = null, object? advancedFields = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, AdvancedFields = advancedFields });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class MusicAssistantEntityExtensionMethods
{
    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    public static void GetQueue(this IMediaPlayerEntityCore target)
    {
        target.CallService("get_queue");
    }

    ///<summary>Retrieves the details of the currently active queue of a Music Assistant player.</summary>
    public static void GetQueue(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("get_queue");
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayAnnouncement(this IMediaPlayerEntityCore target, MusicAssistantPlayAnnouncementParameters data)
    {
        target.CallService("play_announcement", data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayAnnouncement(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantPlayAnnouncementParameters data)
    {
        target.CallService("play_announcement", data);
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public static void PlayAnnouncement(this IMediaPlayerEntityCore target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        target.CallService("play_announcement", new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays an announcement on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="url">URL to the notification sound. eg: http://someremotesite.com/doorbell.mp3</param>
    ///<param name="usePreAnnounce">Use pre-announcement sound for the announcement. Omit to use the player default. eg: true</param>
    ///<param name="announceVolume">Use a forced volume level for the announcement. Omit to use player default. eg: 75</param>
    public static void PlayAnnouncement(this IEnumerable<IMediaPlayerEntityCore> target, string url, bool? usePreAnnounce = null, long? announceVolume = null)
    {
        target.CallService("play_announcement", new MusicAssistantPlayAnnouncementParameters { Url = url, UsePreAnnounce = usePreAnnounce, AnnounceVolume = announceVolume });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MusicAssistantPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        target.CallService("play_media", new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Plays media on a Music Assistant player with more fine-grained control options.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaId">URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items. eg: spotify://playlist/aabbccddeeff</param>
    ///<param name="mediaType">The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted. eg: playlist</param>
    ///<param name="artist">When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name. eg: Queen</param>
    ///<param name="album">When specifying a track by name in the Media ID field, you can optionally restrict results by this album name. eg: News of the world</param>
    ///<param name="enqueue">If the content should be played now or added to the queue.</param>
    ///<param name="radioMode">Enable radio mode to auto-generate a playlist based on the selection.</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, object mediaId, object? mediaType = null, string? artist = null, string? album = null, object? enqueue = null, bool? radioMode = null)
    {
        target.CallService("play_media", new MusicAssistantPlayMediaParameters { MediaId = mediaId, MediaType = mediaType, Artist = artist, Album = album, Enqueue = enqueue, RadioMode = radioMode });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    public static void TransferQueue(this IMediaPlayerEntityCore target, MusicAssistantTransferQueueParameters data)
    {
        target.CallService("transfer_queue", data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    public static void TransferQueue(this IEnumerable<IMediaPlayerEntityCore> target, MusicAssistantTransferQueueParameters data)
    {
        target.CallService("transfer_queue", data);
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public static void TransferQueue(this IMediaPlayerEntityCore target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        target.CallService("transfer_queue", new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }

    ///<summary>Transfers a player&apos;s queue to another player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="sourcePlayer">The source media player which has the queue you want to transfer. When omitted, the first playing player will be used.</param>
    ///<param name="autoPlay">Start playing the queue on the target player. Omit to use the default behavior. eg: true</param>
    public static void TransferQueue(this IEnumerable<IMediaPlayerEntityCore> target, string? sourcePlayer = null, bool? autoPlay = null)
    {
        target.CallService("transfer_queue", new MusicAssistantTransferQueueParameters { SourcePlayer = sourcePlayer, AutoPlay = autoPlay });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class PowercalcEntityExtensionMethods
{
    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this ISensorEntityCore target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    public static void ActivatePlaybook(this IEnumerable<ISensorEntityCore> target, PowercalcActivatePlaybookParameters data)
    {
        target.CallService("activate_playbook", data);
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this ISensorEntityCore target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Start execution of a playbook.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="playbookId">Playbook identifier. eg: program1</param>
    public static void ActivatePlaybook(this IEnumerable<ISensorEntityCore> target, string playbookId)
    {
        target.CallService("activate_playbook", new PowercalcActivatePlaybookParameters { PlaybookId = playbookId });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this ISensorEntityCore target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    public static void CalibrateEnergy(this IEnumerable<ISensorEntityCore> target, PowercalcCalibrateEnergyParameters data)
    {
        target.CallService("calibrate_energy", data);
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Sets the energy sensor to a given kWh value.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateEnergy(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate_energy", new PowercalcCalibrateEnergyParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this ISensorEntityCore target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void CalibrateUtilityMeter(this IEnumerable<ISensorEntityCore> target, PowercalcCalibrateUtilityMeterParameters data)
    {
        target.CallService("calibrate_utility_meter", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">The value to set. eg: 100</param>
    public static void CalibrateUtilityMeter(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate_utility_meter", new PowercalcCalibrateUtilityMeterParameters { Value = value });
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    public static void GetGroupEntities(this ISensorEntityCore target)
    {
        target.CallService("get_group_entities");
    }

    ///<summary>Retrieve all entity id&apos;s of a group energy or power sensor</summary>
    public static void GetGroupEntities(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("get_group_entities");
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this ISensorEntityCore target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    public static void IncreaseDailyEnergy(this IEnumerable<ISensorEntityCore> target, PowercalcIncreaseDailyEnergyParameters data)
    {
        target.CallService("increase_daily_energy", data);
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this ISensorEntityCore target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Increases the sensor with a given amount.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Amount to add to the sensor. eg: 100</param>
    public static void IncreaseDailyEnergy(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("increase_daily_energy", new PowercalcIncreaseDailyEnergyParameters { Value = value });
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this ISensorEntityCore target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Reset an energy sensor to zero kWh.</summary>
    public static void ResetEnergy(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("reset_energy");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this ISensorEntityCore target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Stop currently active playbook.</summary>
    public static void StopPlaybook(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("stop_playbook");
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this ISensorEntityCore target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    public static void SwitchSubProfile(this IEnumerable<ISensorEntityCore> target, PowercalcSwitchSubProfileParameters data)
    {
        target.CallService("switch_sub_profile", data);
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public static void SwitchSubProfile(this ISensorEntityCore target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }

    ///<summary>Some profiles in the library has different sub profiles. This service allows you to switch to another one.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="profile">Define one of the possible sub profiles eg: night_vision</param>
    public static void SwitchSubProfile(this IEnumerable<ISensorEntityCore> target, string profile)
    {
        target.CallService("switch_sub_profile", new PowercalcSwitchSubProfileParameters { Profile = profile });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target)
    {
        target.CallService("delete");
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target)
    {
        target.CallService("delete");
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this ISensorEntityCore target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this ISelectEntityCore target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("reset");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}